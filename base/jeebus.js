(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var attach, connect, detach, get, processModelUpdate, processRpcReply, put, rpc, rpcPromises, send, seqNum, trackedModels, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    trackedModels = {};
    processModelUpdate = function(key, value) {
      var info, k, suffix;
      for (k in trackedModels) {
        info = trackedModels[k];
        if (k === key.slice(0, k.length)) {
          suffix = key.slice(k.length);
          if (value) {
            info.model[suffix] = value;
          } else {
            delete info.model[suffix];
          }
        }
      }
      if (!suffix) {
        return console.error("spurious model update", key, value);
      }
    };
    processRpcReply = function(err, n, result) {
      var d;
      d = rpcPromises[n];
      if (d) {
        if (err) {
          console.error(err);
          return d.reject(err);
        } else {
          return d.resolve(result);
        }
      } else {
        return console.error("spurious rpc reply", err, n, result);
      }
    };
    connect = function(appTag) {
      var reconnect;
      reconnect = function(firstCall) {
        ws = new WebSocket("ws://" + location.host + "/ws", [appTag]);
        ws.onopen = function() {
          console.log('WS Open');
          return $rootScope.$apply(function() {
            return $rootScope.serverStatus = 'connected';
          });
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, k, v, _i, _len, _ref, _results, _results1;
            data = JSON.parse(m.data);
            switch (typeof data) {
              case 'object':
                if (Array.isArray(data)) {
                  return processRpcReply.apply(null, data);
                } else {
                  _results = [];
                  for (k in data) {
                    v = data[k];
                    _results.push(processModelUpdate(k, v));
                  }
                  return _results;
                }
                break;
              case 'boolean':
                if (data) {
                  return window.location.reload(true);
                } else {
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results1 = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results1.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                }
                break;
              default:
                return console.log('Server msg:', data);
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Closed');
          $rootScope.$apply(function() {
            return $rootScope.serverStatus = 'disconnected';
          });
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      var msg;
      msg = angular.toJson(payload);
      if (msg[0] === '[') {
        console.error("payload can't be an array (" + payload.length + " elements)");
      } else {
        ws.send(msg);
      }
      return this;
    };
    get = function(key) {
      return rpc('get', key);
    };
    put = function(key, value) {
      ws.send(angular.toJson([0, 'put', key, value]));
      return this;
    };
    rpc = function() {
      var args, d, n;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      d = $q.defer();
      n = ++seqNum;
      rpcPromises[n] = d;
      ws.send(angular.toJson([n].concat(__slice.call(args))));
      setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      return d.promise;
    };
    attach = function(path) {
      var info;
      info = trackedModels[path] != null ? trackedModels[path] : trackedModels[path] = {
        model: {},
        count: 0
      };
      if (info.count++ === 0) {
        rpc('attach', path).then(function(r) {
          var k, v;
          for (k in r) {
            v = r[k];
            processModelUpdate(k, v);
          }
          return console.log('attach', path);
        });
      }
      return info.model;
    };
    detach = function(path) {
      if (trackedModels[path] && --trackedModels[path].count <= 0) {
        delete trackedModels[path];
        rpc('detach', path).then(function() {
          return console.log('detach', path);
        });
      }
      return this;
    };
    return {
      connect: connect,
      send: send,
      get: get,
      put: put,
      rpc: rpc,
      attach: attach,
      detach: detach
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
