(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  console.log('NG', angular.version.full);

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var connect, gadget, get, processRpcReply, put, rpc, rpcPromises, send, seqNum, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    processRpcReply = function() {
      var deferred, emitter, msg, n, reply, timer, _ref;
      n = arguments[0], msg = arguments[1], reply = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      _ref = rpcPromises[n], timer = _ref.timer, deferred = _ref.deferred, emitter = _ref.emitter;
      if (deferred) {
        clearTimeout(timer);
        if (msg === true) {
          rpcPromises[n].deferred = null;
          deferred.resolve(function(ee) {
            return rpcPromises[n].emitter = ee;
          });
          return;
        }
        if (msg === "" && reply.length) {
          deferred.resolve(reply[0]);
        } else if (msg !== "" && reply.length === 0) {
          console.error("reject reply", msg);
          deferred.reject(msg);
        } else {
          console.error.apply(console, ["bad rpc reply", n, msg].concat(__slice.call(reply)));
        }
        return delete rpcPromises[n];
      } else if (emitter) {
        if (msg && reply.length) {
          return emitter.emit(msg, reply[0]);
        } else {
          delete rpcPromises[n];
          return emitter.emit('close', reply[0]);
        }
      } else {
        return console.error.apply(console, ["spurious rpc reply", n, msg].concat(__slice.call(reply)));
      }
    };
    connect = function(appTag) {
      var reconnect;
      reconnect = function(firstCall) {
        ws = new WebSocket("ws://" + location.host + "/ws", [appTag]);
        ws.onopen = function() {
          console.log('WS Open');
          return $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-open');
          });
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, _i, _len, _ref, _results;
            data = JSON.parse(m.data);
            switch (typeof data) {
              case 'object':
                if (Array.isArray(data)) {
                  return processRpcReply.apply(null, data);
                } else {
                  return console.log({
                    "spurious object received": m
                  });
                }
                break;
              case 'boolean':
                if (data) {
                  return window.location.reload(true);
                } else {
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                }
                break;
              default:
                return console.log('Server msg:', data);
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Lost');
          $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-lost');
          });
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      ws.send(angular.toJson(payload));
      return this;
    };
    get = function(key) {
      return rpc('get', key);
    };
    put = function(key, value) {
      send([0, 'put', key, value]);
      return this;
    };
    rpc = function() {
      var args, cmd, d, n, t;
      cmd = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      d = $q.defer();
      n = ++seqNum;
      ws.send(angular.toJson([cmd, n].concat(__slice.call(args))));
      t = setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      rpcPromises[n] = {
        timer: t,
        deferred: d
      };
      return d.promise;
    };
    gadget = function() {
      var args, e;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      e = new EventEmitter;
      rpc.apply(null, args).then(function(eeSetter) {
        return eeSetter(e);
      });
      return e;
    };
    window.send = send;
    return {
      connect: connect,
      send: send,
      get: get,
      put: put,
      rpc: rpc,
      gadget: gadget
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYnVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFsQyxDQUZBLENBQUE7O0FBQUEsRUFJQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsa0JBQUQsRUFBcUIsaUJBQXJCLEdBQUE7QUFDUixJQUFBLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCLEdBQTdCLENBQUEsQ0FBQTtXQUNBLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLElBQTVCLEVBRlE7RUFBQSxDQUFWLENBSkEsQ0FBQTs7QUFBQSxFQVVBLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxFQUFxQixTQUFDLFVBQUQsRUFBYSxFQUFiLEdBQUE7QUFDbkIsUUFBQSw4RUFBQTtBQUFBLElBQUEsRUFBQSxHQUFLLElBQUwsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLENBRFQsQ0FBQTtBQUFBLElBRUEsV0FBQSxHQUFjLEVBRmQsQ0FBQTtBQUFBLElBS0EsZUFBQSxHQUFrQixTQUFBLEdBQUE7QUFDaEIsVUFBQSw2Q0FBQTtBQUFBLE1BRGlCLGtCQUFHLG9CQUFLLCtEQUN6QixDQUFBO0FBQUEsTUFBQSxPQUEyQixXQUFZLENBQUEsQ0FBQSxDQUF2QyxFQUFDLGFBQUEsS0FBRCxFQUFPLGdCQUFBLFFBQVAsRUFBZ0IsZUFBQSxPQUFoQixDQUFBO0FBQ0EsTUFBQSxJQUFHLFFBQUg7QUFDRSxRQUFBLFlBQUEsQ0FBYSxLQUFiLENBQUEsQ0FBQTtBQUNBLFFBQUEsSUFBRyxHQUFBLEtBQU8sSUFBVjtBQUNFLFVBQUEsV0FBWSxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQWYsR0FB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UUFBQSxLQUFBLEVBQU8sQ0FBUDtBQUFBLFFBQVUsUUFBQSxFQUFVLENBQXBCO09BVGpCLENBQUE7YUFVQSxDQUFDLENBQUMsUUFYRTtJQUFBLENBOUZOLENBQUE7QUFBQSxJQTRHQSxNQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsVUFBQSxPQUFBO0FBQUEsTUFEUSw4REFDUixDQUFBO0FBQUEsTUFBQSxDQUFBLEdBQUksR0FBQSxDQUFBLFlBQUosQ0FBQTtBQUFBLE1BQ0EsR0FBQSxhQUFJLElBQUosQ0FDRSxDQUFDLElBREgsQ0FDUSxTQUFDLFFBQUQsR0FBQTtlQUNKLFFBQUEsQ0FBUyxDQUFULEVBREk7TUFBQSxDQURSLENBREEsQ0FBQTthQUlBLEVBTE87SUFBQSxDQTVHVCxDQUFBO0FBQUEsSUFtSEEsTUFBTSxDQUFDLElBQVAsR0FBYyxJQW5IZCxDQUFBO1dBb0hBO0FBQUEsTUFBQyxTQUFBLE9BQUQ7QUFBQSxNQUFTLE1BQUEsSUFBVDtBQUFBLE1BQWMsS0FBQSxHQUFkO0FBQUEsTUFBa0IsS0FBQSxHQUFsQjtBQUFBLE1BQXNCLEtBQUEsR0FBdEI7QUFBQSxNQUEwQixRQUFBLE1BQTFCO01BckhtQjtFQUFBLENBQXJCLENBVkEsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbmNvbnNvbGUubG9nICdORycsIGFuZ3VsYXIudmVyc2lvbi5mdWxsXG5cbm5nLmNvbmZpZyAoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikgLT5cbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSAnLydcbiAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlIHRydWVcbiAgXG4jIFRoZSBcImplZWJ1c1wiIHNlcnZpY2UgYmVsb3cgaXMgdGhlIHNhbWUgZm9yIGFsbCBjbGllbnQtc2lkZSBhcHBsaWNhdGlvbnMuXG4jIEl0IGxldHMgYW5ndWxhciBjb25uZWN0IHRvIHRoZSBKZWVCdXMgc2VydmVyIGFuZCBzZW5kL3JlY2VpdmUgbWVzc2FnZXMuXG5uZy5mYWN0b3J5ICdqZWVidXMnLCAoJHJvb3RTY29wZSwgJHEpIC0+XG4gIHdzID0gbnVsbCAgICAgICAgICAjIHRoZSB3ZWJzb2NrZXQgb2JqZWN0LCB3aGlsZSBvcGVuXG4gIHNlcU51bSA9IDAgICAgICAgICAjIHVuaXF1ZSBzZXF1ZW5jZSBudW1iZXJzIGZvciBlYWNoIFJQQyByZXF1ZXN0XG4gIHJwY1Byb21pc2VzID0ge30gICAjIG1hcHMgc2VxTnVtIHRvIGEgcGVuZGluZyB7dGltZXIsZGVmZXJyZWQsZW1pdHRlcn0gZW50cnlcblxuICAjIFJlc29sdmUgb3IgcmVqZWN0IGEgcGVuZGluZyBycGMgcHJvbWlzZS4gQWxzbyBoYW5kbGUgc3RyZWFtZWQgcmVzdWx0cy5cbiAgcHJvY2Vzc1JwY1JlcGx5ID0gKG4sIG1zZywgcmVwbHkuLi4pIC0+XG4gICAge3RpbWVyLGRlZmVycmVkLGVtaXR0ZXJ9ID0gcnBjUHJvbWlzZXNbbl1cbiAgICBpZiBkZWZlcnJlZFxuICAgICAgY2xlYXJUaW1lb3V0IHRpbWVyXG4gICAgICBpZiBtc2cgaXMgdHJ1ZSAjIHN0YXJ0IHN0cmVhbWluZ1xuICAgICAgICBycGNQcm9taXNlc1tuXS5kZWZlcnJlZCA9IG51bGxcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSAoZWUpIC0+XG4gICAgICAgICAgcnBjUHJvbWlzZXNbbl0uZW1pdHRlciA9IGVlXG4gICAgICAgIHJldHVyblxuICAgICAgaWYgbXNnIGlzIFwiXCIgYW5kIHJlcGx5Lmxlbmd0aFxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlIHJlcGx5WzBdXG4gICAgICBlbHNlIGlmIG1zZyBpc250IFwiXCIgYW5kIHJlcGx5Lmxlbmd0aCA9PSAwXG4gICAgICAgIGNvbnNvbGUuZXJyb3IgXCJyZWplY3QgcmVwbHlcIiwgbXNnXG4gICAgICAgIGRlZmVycmVkLnJlamVjdCBtc2dcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5lcnJvciBcImJhZCBycGMgcmVwbHlcIiwgbiwgbXNnLCByZXBseS4uLlxuICAgICAgZGVsZXRlIHJwY1Byb21pc2VzW25dXG4gICAgZWxzZSBpZiBlbWl0dGVyXG4gICAgICBpZiBtc2cgYW5kIHJlcGx5Lmxlbmd0aFxuICAgICAgICBlbWl0dGVyLmVtaXQgbXNnLCByZXBseVswXVxuICAgICAgZWxzZVxuICAgICAgICBkZWxldGUgcnBjUHJvbWlzZXNbbl0gIyBzdG9wIHN0cmVhbWluZ1xuICAgICAgICBlbWl0dGVyLmVtaXQgJ2Nsb3NlJywgcmVwbHlbMF1cbiAgICBlbHNlXG4gICAgICBjb25zb2xlLmVycm9yIFwic3B1cmlvdXMgcnBjIHJlcGx5XCIsIG4sIG1zZywgcmVwbHkuLi5cblxuICAjIFNldCB1cCBhIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBKZWVCdXMgc2VydmVyLlxuICAjIFRoZSBhcHBUYWcgaXMgdGhlIGRlZmF1bHQgdGFnIHRvIHVzZSB3aGVuIHNlbmRpbmcgcmVxdWVzdHMgdG8gaXQuXG4gIGNvbm5lY3QgPSAoYXBwVGFnKSAtPlxuXG4gICAgcmVjb25uZWN0ID0gKGZpcnN0Q2FsbCkgLT5cbiAgICAgICMgdGhlIHdlYnNvY2tldCBpcyBzZXJ2ZWQgZnJvbSB0aGUgc2FtZSBzaXRlIGFzIHRoZSB3ZWIgcGFnZVxuICAgICAgd3MgPSBuZXcgV2ViU29ja2V0IFwid3M6Ly8je2xvY2F0aW9uLmhvc3R9L3dzXCIsIFthcHBUYWddXG5cbiAgICAgIHdzLm9ub3BlbiA9IC0+XG4gICAgICAgICMgbG9jYXRpb24ucmVsb2FkKCkgIHVubGVzcyBmaXJzdENhbGxcbiAgICAgICAgY29uc29sZS5sb2cgJ1dTIE9wZW4nXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0ICd3cy1vcGVuJ1xuXG4gICAgICB3cy5vbm1lc3NhZ2UgPSAobSkgLT5cbiAgICAgICAgaWYgbS5kYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJcbiAgICAgICAgICBjb25zb2xlLmxvZyAnYmluYXJ5IG1zZycsIG1cbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSBtLmRhdGFcbiAgICAgICAgICBzd2l0Y2ggdHlwZW9mIGRhdGFcbiAgICAgICAgICAgIHdoZW4gJ29iamVjdCdcbiAgICAgICAgICAgICAgaWYgQXJyYXkuaXNBcnJheSBkYXRhXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1JwY1JlcGx5IGRhdGEuLi5cbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwic3B1cmlvdXMgb2JqZWN0IHJlY2VpdmVkXCI6IG1cbiAgICAgICAgICAgIHdoZW4gJ2Jvb2xlYW4nXG4gICAgICAgICAgICAgIGlmIGRhdGEgIyByZWxvYWQgYXBwXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCB0cnVlXG4gICAgICAgICAgICAgIGVsc2UgIyByZWZyZXNoIHN0eWxlc2hlZXRzXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCJDU1MgUmVsb2FkXCJcbiAgICAgICAgICAgICAgICBmb3IgZSBpbiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSAnbGluaydcbiAgICAgICAgICAgICAgICAgIGlmIGUuaHJlZiBhbmQgL3N0eWxlc2hlZXQvaS50ZXN0IGUucmVsXG4gICAgICAgICAgICAgICAgICAgIGUuaHJlZiA9IFwiI3tlLmhyZWYucmVwbGFjZSAvXFw/LiovLCAnJ30/I3tEYXRlLm5vdygpfVwiXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nICdTZXJ2ZXIgbXNnOicsIGRhdGFcblxuICAgICAgIyB3cy5vbmVycm9yID0gKGUpIC0+XG4gICAgICAjICAgY29uc29sZS5sb2cgJ0Vycm9yJywgZVxuXG4gICAgICB3cy5vbmNsb3NlID0gLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ1dTIExvc3QnXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0ICd3cy1sb3N0J1xuICAgICAgICBzZXRUaW1lb3V0IHJlY29ubmVjdCwgMTAwMFxuXG4gICAgcmVjb25uZWN0IHRydWVcbiAgIFxuICAjIFNlbmQgYSBwYXlsb2FkIHRvIHRoZSBKZWVCdXMgc2VydmVyIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAjIFRoZSBwYXlsb2FkIHNob3VsZCBiZSBhbiBvYmplY3QgKGFueXRoaW5nIGJ1dCBhcnJheSBpcyBzdXBwb3J0ZWQgZm9yIG5vdykuXG4gIHNlbmQgPSAocGF5bG9hZCkgLT5cbiAgICB3cy5zZW5kIGFuZ3VsYXIudG9Kc29uIHBheWxvYWRcbiAgICBAXG5cbiAgIyBGZXRjaCBhIGtleS92YWx1ZSBwYWlyIGZyb20gdGhlIHNlcnZlciBkYXRhYmFzZSwgdmFsdWUgcmV0dXJuZWQgYXMgcHJvbWlzZS5cbiAgZ2V0ID0gKGtleSkgLT5cbiAgICBycGMgJ2dldCcsIGtleVxuICAgICAgXG4gICMgU3RvcmUgYSBrZXkvdmFsdWUgcGFpciBpbiB0aGUgc2VydmVyIGRhdGFiYXNlLlxuICBwdXQgPSAoa2V5LCB2YWx1ZSkgLT5cbiAgICBzZW5kIFswLCAncHV0Jywga2V5LCB2YWx1ZV1cbiAgICBAXG4gICAgICBcbiAgIyBQZXJmb3JtIGFuIFJQQyBjYWxsLCBpLmUuIHJlZ2lzdGVyIHJlc3VsdCBjYWxsYmFjayBhbmQgcmV0dXJuIGEgcHJvbWlzZS5cbiAgcnBjID0gKGNtZCwgYXJncy4uLikgLT5cbiAgICBkID0gJHEuZGVmZXIoKVxuICAgIG4gPSArK3NlcU51bVxuICAgIHdzLnNlbmQgYW5ndWxhci50b0pzb24gW2NtZCwgbiwgYXJncy4uLl1cbiAgICB0ID0gc2V0VGltZW91dCAtPlxuICAgICAgY29uc29sZS5lcnJvciBcIlJQQyAje259OiBubyByZXBvbnNlXCIsIGFyZ3NcbiAgICAgIGRlbGV0ZSBycGNQcm9taXNlc1tuXVxuICAgICAgJHJvb3RTY29wZS4kYXBwbHkgLT5cbiAgICAgICAgZC5yZWplY3QoKVxuICAgICwgMTAwMDAgIyAxMCBzZWNvbmRzIHNob3VsZCBiZSBlbm91Z2ggdG8gY29tcGxldGUgYW55IHJlcXVlc3RcbiAgICBycGNQcm9taXNlc1tuXSA9IHRpbWVyOiB0LCBkZWZlcnJlZDogZFxuICAgIGQucHJvbWlzZVxuXG4gICMgTGF1bmNoIGEgZ2FkZ2V0IG9uIHRoZSBzZXJ2ZXIgYW5kIHJldHVybiBpdHMgcmVzdWx0cyB2aWEgZXZlbnRzLlxuICBnYWRnZXQgPSAoYXJncy4uLikgLT5cbiAgICBlID0gbmV3IEV2ZW50RW1pdHRlclxuICAgIHJwYyBhcmdzLi4uXG4gICAgICAudGhlbiAoZWVTZXR0ZXIpIC0+XG4gICAgICAgIGVlU2V0dGVyIGVcbiAgICBlXG4gIFxuICB3aW5kb3cuc2VuZCA9IHNlbmQgIyBjb25zb2xlIGFjY2VzcywgZm9yIGRlYnVnZ2luZ1xuICB7Y29ubmVjdCxzZW5kLGdldCxwdXQscnBjLGdhZGdldH1cbiJdfQ==
