(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var attach, connect, detach, fetch, processModelUpdate, processRpcReply, rpc, rpcPromises, send, seqNum, store, trackedModels, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    trackedModels = {};
    processModelUpdate = function(key, value) {
      var info, k, suffix;
      for (k in trackedModels) {
        info = trackedModels[k];
        if (k === key.slice(0, k.length)) {
          suffix = key.slice(k.length);
          if (value) {
            info.model[suffix] = value;
          } else {
            delete info.model[suffix];
          }
        }
      }
      if (!suffix) {
        return console.error("spurious model update", key, value);
      }
    };
    processRpcReply = function(n, result, err) {
      var d, tid, _ref;
      if (rpcPromises[n]) {
        _ref = rpcPromises[n], tid = _ref[0], d = _ref[1];
        clearTimeout(tid);
        if (err) {
          console.error(err);
          return d.reject(err);
        } else {
          return d.resolve(result);
        }
      } else {
        return console.error("spurious rpc reply", n, result, err);
      }
    };
    connect = function(appTag, port) {
      var reconnect;
      if (port == null) {
        port = location.port;
      }
      reconnect = function(firstCall) {
        ws = new WebSocket("ws://" + location.hostname + ":" + port + "/ws", [appTag]);
        ws.onopen = function() {
          return console.log('WS Open');
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, k, v, _i, _len, _ref, _results, _results1;
            data = JSON.parse(m.data);
            if (m.data[0] === '[') {
              return processRpcReply.apply(null, data);
            } else {
              switch (data) {
                case true:
                  return window.location.reload(true);
                case false:
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                  break;
                default:
                  _results1 = [];
                  for (k in data) {
                    v = data[k];
                    _results1.push(processModelUpdate(k, v));
                  }
                  return _results1;
              }
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Closed');
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      var msg;
      msg = angular.toJson(payload);
      if (msg[0] === '[') {
        console.error("payload can't be an array (" + payload.length + " elements)");
      } else {
        ws.send(msg);
      }
      return this;
    };
    fetch = function(key) {
      if (key[0] === '/') {
        return rpc(key);
      } else {
        return console.error('key does not start with "/":', key);
      }
    };
    store = function(key, value) {
      var msg;
      msg = angular.toJson([key, value]);
      if (msg.slice(0, 3) === '["/') {
        ws.send(msg);
      } else {
        console.error('key does not start with "/":', key);
      }
      return this;
    };
    rpc = function() {
      var args, d, n, tid;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      d = $q.defer();
      n = ++seqNum;
      ws.send(angular.toJson([n].concat(__slice.call(args))));
      tid = setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      rpcPromises[n] = [tid, d];
      return d.promise;
    };
    attach = function(path) {
      var info;
      info = trackedModels[path] != null ? trackedModels[path] : trackedModels[path] = {
        model: {},
        count: 0
      };
      if (info.count++ === 0) {
        rpc('attach', path).then(function(r) {
          var k, v;
          for (k in r) {
            v = r[k];
            processModelUpdate(k, v);
          }
          return console.log('attach', path);
        });
      }
      return info.model;
    };
    detach = function(path) {
      if (trackedModels[path] && --trackedModels[path].count <= 0) {
        delete trackedModels[path];
        return rpc('detach', path).then(function() {
          return console.log('detach', path);
        });
      }
    };
    return {
      connect: connect,
      send: send,
      fetch: fetch,
      store: store,
      rpc: rpc,
      attach: attach,
      detach: detach
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYnVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsa0JBQUQsRUFBcUIsaUJBQXJCLEdBQUE7QUFDUixJQUFBLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCLEdBQTdCLENBQUEsQ0FBQTtXQUNBLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLElBQTVCLEVBRlE7RUFBQSxDQUFWLENBRkEsQ0FBQTs7QUFBQSxFQVFBLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxFQUFxQixTQUFDLFVBQUQsRUFBYSxFQUFiLEdBQUE7QUFDbkIsUUFBQSw2SEFBQTtBQUFBLElBQUEsRUFBQSxHQUFLLElBQUwsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLENBRFQsQ0FBQTtBQUFBLElBRUEsV0FBQSxHQUFjLEVBRmQsQ0FBQTtBQUFBLElBR0EsYUFBQSxHQUFnQixFQUhoQixDQUFBO0FBQUEsSUFNQSxrQkFBQSxHQUFxQixTQUFDLEdBQUQsRUFBTSxLQUFOLEdBQUE7QUFDbkIsVUFBQSxlQUFBO0FBQUEsV0FBQSxrQkFBQTtnQ0FBQTtBQUNFLFFBQUEsSUFBRyxDQUFBLEtBQUssR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBQyxDQUFDLE1BQWYsQ0FBUjtBQUNFLFVBQUEsTUFBQSxHQUFTLEdBQUcsQ0FBQyxLQUFKLENBQVUsQ0FBQyxDQUFDLE1BQVosQ0FBVCxDQUFBO0FBQ0EsVUFBQSxJQUFHLEtBQUg7QUFDRSxZQUFBLElBQUksQ0FBQyxLQUFNLENBQUEsTUFBQSxDQUFYLEdBQXFCLEtBQXJCLENBREY7V0FBQSxNQUFBO0FBR0UsWUFBQSxNQUFBLENBQUEsSUFBVyxDQUFDLEtBQU0s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QUEsTUFBOUI7QUFBQSxNQUFxQyxRQUFBLE1BQXJDO01BeEltQjtFQUFBLENBQXJCLENBUkEsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikgLT5cbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSAnLydcbiAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlIHRydWVcbiAgXG4jIFRoZSBcImplZWJ1c1wiIHNlcnZpY2UgYmVsb3cgaXMgdGhlIHNhbWUgZm9yIGFsbCBjbGllbnQtc2lkZSBhcHBsaWNhdGlvbnMuXG4jIEl0IGxldHMgYW5ndWxhciBjb25uZWN0IHRvIHRoZSBKZWVCdXMgc2VydmVyIGFuZCBzZW5kL3JlY2VpdmUgbWVzc2FnZXMuXG5uZy5mYWN0b3J5ICdqZWVidXMnLCAoJHJvb3RTY29wZSwgJHEpIC0+XG4gIHdzID0gbnVsbCAgICAgICAgICAjIHRoZSB3ZWJzb2NrZXQgb2JqZWN0LCB3aGlsZSBvcGVuXG4gIHNlcU51bSA9IDAgICAgICAgICAjIHVuaXF1ZSBzZXF1ZW5jZSBudW1iZXJzIGZvciBlYWNoIFJQQyByZXF1ZXN0XG4gIHJwY1Byb21pc2VzID0ge30gICAjIG1hcHMgc2VxTnVtIHRvIGEgcGVuZGluZyA8dGltZXJJZCxwcm9taXNlPiBlbnRyeVxuICB0cmFja2VkTW9kZWxzID0ge30gIyBrZWVwcyB0cmFjayBvZiB3aGljaCBwYXRocyBoYXZlIGJlZW4gYXR0YWNoZWRcblxuICAjIFVwZGF0ZSBvbmUgb3IgbW9yZSBvZiB0aGUgdHJhY2tlZCBtb2RlbHMgd2l0aCBhbiBpbmNvbWluZyBjaGFuZ2UuXG4gIHByb2Nlc3NNb2RlbFVwZGF0ZSA9IChrZXksIHZhbHVlKSAtPlxuICAgIGZvciBrLCBpbmZvIG9mIHRyYWNrZWRNb2RlbHNcbiAgICAgIGlmIGsgaXMga2V5LnNsaWNlKDAsIGsubGVuZ3RoKVxuICAgICAgICBzdWZmaXggPSBrZXkuc2xpY2Uoay5sZW5ndGgpXG4gICAgICAgIGlmIHZhbHVlXG4gICAgICAgICAgaW5mby5tb2RlbFtzdWZmaXhdID0gdmFsdWVcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGRlbGV0ZSBpbmZvLm1vZGVsW3N1ZmZpeF1cbiAgICBjb25zb2xlLmVycm9yIFwic3B1cmlvdXMgbW9kZWwgdXBkYXRlXCIsIGtleSwgdmFsdWUgIHVubGVzcyBzdWZmaXhcblxuICAjIFJlc29sdmUgb3IgcmVqZWN0IGEgcGVuZGluZyBycGMgcHJvbWlzZS5cbiAgcHJvY2Vzc1JwY1JlcGx5ID0gKG4sIHJlc3VsdCwgZXJyKSAtPlxuICAgIGlmIHJwY1Byb21pc2VzW25dXG4gICAgICBbdGlkLGRdID0gcnBjUHJvbWlzZXNbbl1cbiAgICAgIGNsZWFyVGltZW91dCB0aWRcbiAgICAgIGlmIGVyclxuICAgICAgICBjb25zb2xlLmVycm9yIGVyclxuICAgICAgICBkLnJlamVjdCBlcnJcbiAgICAgIGVsc2VcbiAgICAgICAgZC5yZXNvbHZlIHJlc3VsdFxuICAgIGVsc2VcbiAgICAgIGNvbnNvbGUuZXJyb3IgXCJzcHVyaW91cyBycGMgcmVwbHlcIiwgbiwgcmVzdWx0LCBlcnJcblxuICAjIFNldCB1cCBhIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBKZWVCdXMgc2VydmVyLlxuICAjIFRoZSBhcHBUYWcgaXMgdGhlIGRlZmF1bHQgdGFnIHRvIHVzZSB3aGVuIHNlbmRpbmcgcmVxdWVzdHMgdG8gaXQuXG4gIGNvbm5lY3QgPSAoYXBwVGFnLCBwb3J0KSAtPlxuICAgIHBvcnQgPz0gbG9jYXRpb24ucG9ydCAjIHRoZSBkZWZhdWx0IHBvcnQgaXMgdGhlIHNhbWUgYXMgdGhlIEhUVFAgc2VydmVyXG5cbiAgICByZWNvbm5lY3QgPSAoZmlyc3RDYWxsKSAtPlxuICAgICAgIyB0aGUgd2Vic29ja2V0IGlzIHNlcnZlZCBmcm9tIHRoZSBzYW1lIHNpdGUgYXMgdGhlIHdlYiBwYWdlXG4gICAgICAjIHdzID0gbmV3IFdlYlNvY2tldCBcIndzOi8vI3tsb2NhdGlvbi5ob3N0fS93c1wiXG4gICAgICB3cyA9IG5ldyBXZWJTb2NrZXQgXCJ3czovLyN7bG9jYXRpb24uaG9zdG5hbWV9OiN7cG9ydH0vd3NcIiwgW2FwcFRhZ11cblxuICAgICAgd3Mub25vcGVuID0gLT5cbiAgICAgICAgIyBsb2NhdGlvbi5yZWxvYWQoKSAgdW5sZXNzIGZpcnN0Q2FsbFxuICAgICAgICBjb25zb2xlLmxvZyAnV1MgT3BlbidcblxuICAgICAgd3Mub25tZXNzYWdlID0gKG0pIC0+XG4gICAgICAgIGlmIG0uZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICAgICAgICAgY29uc29sZS5sb2cgJ2JpbmFyeSBtc2cnLCBtXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UobS5kYXRhKVxuICAgICAgICAgIGlmIG0uZGF0YVswXSBpcyAnWydcbiAgICAgICAgICAgIHByb2Nlc3NScGNSZXBseSBkYXRhLi4uXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3dpdGNoIGRhdGFcbiAgICAgICAgICAgICAgd2hlbiB0cnVlICMgcmVsb2FkIGFwcFxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQgdHJ1ZVxuICAgICAgICAgICAgICB3aGVuIGZhbHNlICMgcmVmcmVzaCBzdHlsZXNoZWV0c1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiQ1NTIFJlbG9hZFwiXG4gICAgICAgICAgICAgICAgZm9yIGUgaW4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgJ2xpbmsnXG4gICAgICAgICAgICAgICAgICBpZiBlLmhyZWYgYW5kIC9zdHlsZXNoZWV0L2kudGVzdCBlLnJlbFxuICAgICAgICAgICAgICAgICAgICBlLmhyZWYgPSBcIiN7ZS5ocmVmLnJlcGxhY2UgL1xcPy4qLywgJyd9PyN7RGF0ZS5ub3coKX1cIlxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgIyBUT0RPOiBzaG91bGQgbm90IHdyaXRlIGludG8gdGhlIHJvb3Qgc2NvcGUgKG1lcmdlLCBwZXJoYXBzPylcbiAgICAgICAgICAgICAgICBmb3IgaywgdiBvZiBkYXRhXG4gICAgICAgICAgICAgICAgICAjICRyb290U2NvcGVba10gPSB2XG4gICAgICAgICAgICAgICAgICBwcm9jZXNzTW9kZWxVcGRhdGUgaywgdlxuXG4gICAgICAjIHdzLm9uZXJyb3IgPSAoZSkgLT5cbiAgICAgICMgICBjb25zb2xlLmxvZyAnRXJyb3InLCBlXG5cbiAgICAgIHdzLm9uY2xvc2UgPSAtPlxuICAgICAgICBjb25zb2xlLmxvZyAnV1MgQ2xvc2VkJ1xuICAgICAgICBzZXRUaW1lb3V0IHJlY29ubmVjdCwgMTAwMFxuXG4gICAgcmVjb25uZWN0IHRydWVcbiAgIFxuICAjIFNlbmQgYSBwYXlsb2FkIHRvIHRoZSBKZWVCdXMgc2VydmVyIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uLlxuICAjIFRoZSBwYXlsb2FkIHNob3VsZCBiZSBhbiBvYmplY3QgKGFueXRoaW5nIGJ1dCBhcnJheSBpcyBzdXBwb3J0ZWQgZm9yIG5vdykuXG4gICMgVGhpcyBiZWNvbWVzIGFuIE1RVFQgbWVzc2FnZSB3aXRoIHRvcGljIFwic3YvPGFwcFRhZz4vaXAtPGFkZHI6cG9ydD5cIi5cbiAgc2VuZCA9IChwYXlsb2FkKSAtPlxuICAgIG1zZyA9IGFuZ3VsYXIudG9Kc29uIHBheWxvYWRcbiAgICBpZiBtc2dbMF0gaXMgJ1snXG4gICAgICBjb25zb2xlLmVycm9yIFwicGF5bG9hZCBjYW4ndCBiZSBhbiBhcnJheSAoI3twYXlsb2FkLmxlbmd0aH0gZWxlbWVudHMpXCJcbiAgICBlbHNlXG4gICAgICB3cy5zZW5kIG1zZ1xuICAgIEBcblxuICAjIEZldGNoIGEga2V5L3ZhbHVlIHBhaXIgZnJvbSB0aGUgSmVlQnVzIGRhdGFiYXNlIChrZXkgbXVzdCBzdGFydCB3aXRoIFwiL1wiKS5cbiAgZmV0Y2ggPSAoa2V5KSAtPlxuICAgIGlmIGtleVswXSBpcyAnLydcbiAgICAgIHJwYyBrZXlcbiAgICBlbHNlXG4gICAgICBjb25zb2xlLmVycm9yICdrZXkgZG9lcyBub3Qgc3RhcnQgd2l0aCBcIi9cIjonLCBrZXlcbiAgICAgIFxuICAjIFN0b3JlIGEga2V5L3ZhbHVlIHBhaXIgaW4gdGhlIEplZUJ1cyBkYXRhYmFzZSAoa2V5IG11c3Qgc3RhcnQgd2l0aCBcIi9cIikuXG4gIHN0b3JlID0gKGtleSwgdmFsdWUpIC0+XG4gICAgbXNnID0gYW5ndWxhci50b0pzb24gW2tleSwgdmFsdWVdXG4gICAgaWYgbXNnLnNsaWNlKDAsIDMpIGlzICdbXCIvJ1xuICAgICAgd3Muc2VuZCBtc2dcbiAgICBlbHNlXG4gICAgICBjb25zb2xlLmVycm9yICdrZXkgZG9lcyBub3Qgc3RhcnQgd2l0aCBcIi9cIjonLCBrZXlcbiAgICBAXG4gICAgICBcbiAgIyBQZXJmb3JtIGFuIFJQQyBjYWxsLCBpLmUuIHJlZ2lzdGVyIHJlc3VsdCBjYWxsYmFjayBhbmQgcmV0dXJuIGEgcHJvbWlzZS5cbiAgIyBUaGlzIGRvZXNuJ3QgdXNlIE1RVFQgdG8gYXZvaWQgYWRkaXRpb25hbCByb3VuZCB0cmlwcyBmb3IgZnJlcXVlbnQgY2FsbHMuXG4gIHJwYyA9IChhcmdzLi4uKSAtPlxuICAgIGQgPSAkcS5kZWZlcigpXG4gICAgbiA9ICsrc2VxTnVtXG4gICAgd3Muc2VuZCBhbmd1bGFyLnRvSnNvbiBbbiwgYXJncy4uLl1cbiAgICAjIFRPRE86IHRoZXJlJ3Mgbm8gbmVlZCB0byByZW1lbWJlciB0aWQsIGl0J3Mgb2sgaWYgdGhlIHRpbWVyIGFsd2F5cyBmaXJlc1xuICAgIHRpZCA9IHNldFRpbWVvdXQgLT5cbiAgICAgIGNvbnNvbGUuZXJyb3IgXCJSUEMgI3tufTogbm8gcmVwb25zZVwiLCBhcmdzXG4gICAgICBkZWxldGUgcnBjUHJvbWlzZXNbbl1cbiAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgIGQucmVqZWN0KClcbiAgICAsIDEwMDAwICMgMTAgc2Vjb25kcyBzaG91bGQgYmUgZW5vdWdoIHRvIGNvbXBsZXRlIGFueSByZXF1ZXN0XG4gICAgcnBjUHJvbWlzZXNbbl0gPSBbdGlkLCBkXVxuICAgIGQucHJvbWlzZVxuXG4gICMgQXR0YWNoLCBpLmUuIGdldCBjb3JyZXNwb25kaW5nIGRhdGEgYXMgYSBtb2RlbCB3aGljaCB0cmFja3MgYWxsIGNoYW5nZXMuXG4gIGF0dGFjaCA9IChwYXRoKSAtPlxuICAgIGluZm8gPSB0cmFja2VkTW9kZWxzW3BhdGhdID89IHsgbW9kZWw6IHt9LCBjb3VudDogMCB9XG4gICAgaWYgaW5mby5jb3VudCsrIGlzIDBcbiAgICAgIHJwYyAnYXR0YWNoJywgcGF0aFxuICAgICAgICAudGhlbiAocikgLT5cbiAgICAgICAgICBmb3IgaywgdiBvZiByXG4gICAgICAgICAgICBwcm9jZXNzTW9kZWxVcGRhdGUgaywgdlxuICAgICAgICAgIGNvbnNvbGUubG9nICdhdHRhY2gnLCBwYXRoXG4gICAgaW5mby5tb2RlbFxuXG4gICMgVW5kbyB0aGUgZWZmZWN0cyBvZiBhdHRhY2hpbmcsIGkuZS4gc3RvcCBmb2xsb3dpbmcgY2hhbmdlcy5cbiAgZGV0YWNoID0gKHBhdGgpIC0+XG4gICAgaWYgdHJhY2tlZE1vZGVsc1twYXRoXSAmJiAtLXRyYWNrZWRNb2RlbHNbcGF0aF0uY291bnQgPD0gMFxuICAgICAgZGVsZXRlIHRyYWNrZWRNb2RlbHNbcGF0aF1cbiAgICAgIHJwYyAnZGV0YWNoJywgcGF0aFxuICAgICAgICAudGhlbiAtPiBjb25zb2xlLmxvZyAnZGV0YWNoJywgcGF0aFxuXG4gIHtjb25uZWN0LHNlbmQsZmV0Y2gsc3RvcmUscnBjLGF0dGFjaCxkZXRhY2h9XG4iXX0=
