(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  console.log('NG', angular.version.full);

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var attach, connect, gadget, get, processRpcReply, put, rpc, rpcPromises, send, seqNum, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    processRpcReply = function() {
      var deferred, emitter, msg, n, reply, timer, _ref;
      n = arguments[0], msg = arguments[1], reply = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      _ref = rpcPromises[n], timer = _ref.timer, deferred = _ref.deferred, emitter = _ref.emitter;
      if (deferred) {
        clearTimeout(timer);
        if (msg === true) {
          rpcPromises[n].deferred = null;
          deferred.resolve(function(ee) {
            return rpcPromises[n].emitter = ee;
          });
          return;
        }
        if (msg === "" && reply.length) {
          deferred.resolve(reply[0]);
        } else if (msg && reply.length === 0) {
          console.error(msg);
          deferred.reject(msg);
        } else {
          console.error.apply(console, ["bad rpc reply", n, msg].concat(__slice.call(reply)));
        }
        return delete rpcPromises[n];
      } else if (emitter) {
        if (msg && reply.length) {
          return emitter.emit(msg, reply[0]);
        } else {
          delete rpcPromises[n];
          return emitter.emit('close', reply[0]);
        }
      } else {
        return console.error.apply(console, ["spurious rpc reply", n, msg].concat(__slice.call(reply)));
      }
    };
    connect = function(appTag) {
      var reconnect;
      reconnect = function(firstCall) {
        ws = new WebSocket("ws://" + location.host + "/ws", [appTag]);
        ws.onopen = function() {
          console.log('WS Open');
          return $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-open');
          });
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, _i, _len, _ref, _results;
            data = JSON.parse(m.data);
            switch (typeof data) {
              case 'object':
                if (Array.isArray(data)) {
                  return processRpcReply.apply(null, data);
                } else {
                  return console.log({
                    "spurious object received": m
                  });
                }
                break;
              case 'boolean':
                if (data) {
                  return window.location.reload(true);
                } else {
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results.push(void 0);
                    }
                  }
                  return _results;
                }
                break;
              default:
                return console.log('Server msg:', data);
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Lost');
          $rootScope.$apply(function() {
            return $rootScope.$broadcast('ws-lost');
          });
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      ws.send(angular.toJson(payload));
      return this;
    };
    get = function(key) {
      return rpc('get', key);
    };
    put = function(key, value) {
      send([0, 'put', key, value]);
      return this;
    };
    rpc = function() {
      var args, cmd, d, n, t;
      cmd = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      d = $q.defer();
      n = ++seqNum;
      ws.send(angular.toJson([cmd, n].concat(__slice.call(args))));
      t = setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      rpcPromises[n] = {
        timer: t,
        deferred: d
      };
      return d.promise;
    };
    gadget = function() {
      var args, e;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      e = new EventEmitter;
      rpc.apply(null, args).then(function(eeSetter) {
        return eeSetter(e);
      });
      return e;
    };
    attach = function(table, rowHandler) {
      var g;
      g = gadget('Attach', {
        In: "/" + table + "/"
      });
      g.get = function(key) {
        return this.rows[this.keys[key]];
      };
      g.put = function(key, row) {
        var _base, _name;
        row.id = key;
        if ((_base = this.keys)[_name = row.id] == null) {
          _base[_name] = this.rows.length;
        }
        return this.rows[this.keys[row.id]] = row;
      };
      g.on('Out', function(m) {
        switch (m.Tag) {
          case '<range>':
            return this.emit('init', table);
          case '<sync>':
            return this.emit('sync', table);
          default:
            return this.emit('data', m.Tag.slice(2 + table.length), m.Msg);
        }
      });
      g.on('data', rowHandler != null ? rowHandler : g.put);
      g.rows = [];
      g.keys = {};
      return g;
    };
    window.send = send;
    return {
      connect: connect,
      send: send,
      get: get,
      put: put,
      rpc: rpc,
      gadget: gadget,
      attach: attach
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiamVlYnVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTtJQUFBLGtCQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQU8sQ0FBQyxNQUFSLENBQWUsT0FBZixDQUFMLENBQUE7O0FBQUEsRUFFQSxPQUFPLENBQUMsR0FBUixDQUFZLElBQVosRUFBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFsQyxDQUZBLENBQUE7O0FBQUEsRUFJQSxFQUFFLENBQUMsTUFBSCxDQUFVLFNBQUMsa0JBQUQsRUFBcUIsaUJBQXJCLEdBQUE7QUFDUixJQUFBLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCLEdBQTdCLENBQUEsQ0FBQTtXQUNBLGlCQUFpQixDQUFDLFNBQWxCLENBQTRCLElBQTVCLEVBRlE7RUFBQSxDQUFWLENBSkEsQ0FBQTs7QUFBQSxFQVVBLEVBQUUsQ0FBQyxPQUFILENBQVcsUUFBWCxFQUFxQixTQUFDLFVBQUQsRUFBYSxFQUFiLEdBQUE7QUFDbkIsUUFBQSxzRkFBQTtBQUFBLElBQUEsRUFBQSxHQUFLLElBQUwsQ0FBQTtBQUFBLElBQ0EsTUFBQSxHQUFTLENBRFQsQ0FBQTtBQUFBLElBRUEsV0FBQSxHQUFjLEVBRmQsQ0FBQTtBQUFBLElBS0EsZUFBQSxHQUFrQixTQUFBLEdBQUE7QUFDaEIsVUFBQSw2Q0FBQTtBQUFBLE1BRGlCLGtCQUFHLG9CQUFLLCtEQUN6QixDQUFBO0FBQUEsTUFBQSxPQUEyQixXQUFZLENBQUEsQ0FBQSxDQUF2QyxFQUFDLGFBQUEsS0FBRCxFQUFPLGdCQUFBLFFBQVAsRUFBZ0IsZUFBQSxPQUFoQixDQUFBO0FBQ0EsTUFBQSxJQUFHLFFBQUg7QUFDRSxRQUFBLFlBQUEsQ0FBYSxLQUFiLENBQUEsQ0FBQTtBQUNBLFFBQUEsSUFBRyxHQUFBLEtBQU8sSUFBVjtBQUNFLFVBQUEsV0FBWSxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQWYsR0FB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QUMsQ0FBQyxHQUFUO0FBQUEsZUFDTyxTQURQO21CQUNzQixJQUFDLENBQUEsSUFBRCxDQUFNLE1BQU4sRUFBYyxLQUFkLEVBRHRCO0FBQUEsZUFFTyxRQUZQO21CQUVxQixJQUFDLENBQUEsSUFBRCxDQUFNLE1BQU4sRUFBYyxLQUFkLEVBRnJCO0FBQUE7bUJBR08sSUFBQyxDQUFBLElBQUQsQ0FBTSxNQUFOLEVBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFOLENBQVksQ0FBQSxHQUFJLEtBQUssQ0FBQyxNQUF0QixDQUFkLEVBQTZDLENBQUMsQ0FBQyxHQUEvQyxFQUhQO0FBQUEsU0FEVTtNQUFBLENBQVosQ0FWQSxDQUFBO0FBQUEsTUFlQSxDQUFDLENBQUMsRUFBRixDQUFLLE1BQUwsdUJBQWEsYUFBYSxDQUFDLENBQUMsR0FBNUIsQ0FmQSxDQUFBO0FBQUEsTUFpQkEsQ0FBQyxDQUFDLElBQUYsR0FBUyxFQWpCVCxDQUFBO0FBQUEsTUFrQkEsQ0FBQyxDQUFDLElBQUYsR0FBUyxFQWxCVCxDQUFBO2FBbUJBLEVBcEJPO0lBQUEsQ0FuSFQsQ0FBQTtBQUFBLElBeUlBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsSUF6SWQsQ0FBQTtXQTBJQTtBQUFBLE1BQUMsU0FBQSxPQUFEO0FBQUEsTUFBUyxNQUFBLElBQVQ7QUFBQSxNQUFjLEtBQUEsR0FBZDtBQUFBLE1BQWtCLEtBQUEsR0FBbEI7QUFBQSxNQUFzQixLQUFBLEdBQXRCO0FBQUEsTUFBMEIsUUFBQSxNQUExQjtBQUFBLE1BQWlDLFFBQUEsTUFBakM7TUEzSW1CO0VBQUEsQ0FBckIsQ0FWQSxDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxuY29uc29sZS5sb2cgJ05HJywgYW5ndWxhci52ZXJzaW9uLmZ1bGxcblxubmcuY29uZmlnICgkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSAtPlxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlICcvJ1xuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUgdHJ1ZVxuICBcbiMgVGhlIFwiamVlYnVzXCIgc2VydmljZSBiZWxvdyBpcyB0aGUgc2FtZSBmb3IgYWxsIGNsaWVudC1zaWRlIGFwcGxpY2F0aW9ucy5cbiMgSXQgbGV0cyBhbmd1bGFyIGNvbm5lY3QgdG8gdGhlIEplZUJ1cyBzZXJ2ZXIgYW5kIHNlbmQvcmVjZWl2ZSBtZXNzYWdlcy5cbm5nLmZhY3RvcnkgJ2plZWJ1cycsICgkcm9vdFNjb3BlLCAkcSkgLT5cbiAgd3MgPSBudWxsICAgICAgICAgICMgdGhlIHdlYnNvY2tldCBvYmplY3QsIHdoaWxlIG9wZW5cbiAgc2VxTnVtID0gMCAgICAgICAgICMgdW5pcXVlIHNlcXVlbmNlIG51bWJlcnMgZm9yIGVhY2ggUlBDIHJlcXVlc3RcbiAgcnBjUHJvbWlzZXMgPSB7fSAgICMgbWFwcyBzZXFOdW0gdG8gYSBwZW5kaW5nIHt0aW1lcixkZWZlcnJlZCxlbWl0dGVyfSBlbnRyeVxuXG4gICMgUmVzb2x2ZSBvciByZWplY3QgYSBwZW5kaW5nIHJwYyBwcm9taXNlLiBBbHNvIGhhbmRsZSBzdHJlYW1lZCByZXN1bHRzLlxuICBwcm9jZXNzUnBjUmVwbHkgPSAobiwgbXNnLCByZXBseS4uLikgLT5cbiAgICB7dGltZXIsZGVmZXJyZWQsZW1pdHRlcn0gPSBycGNQcm9taXNlc1tuXVxuICAgIGlmIGRlZmVycmVkXG4gICAgICBjbGVhclRpbWVvdXQgdGltZXJcbiAgICAgIGlmIG1zZyBpcyB0cnVlICMgc3RhcnQgc3RyZWFtaW5nXG4gICAgICAgIHJwY1Byb21pc2VzW25dLmRlZmVycmVkID0gbnVsbFxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlIChlZSkgLT5cbiAgICAgICAgICBycGNQcm9taXNlc1tuXS5lbWl0dGVyID0gZWVcbiAgICAgICAgcmV0dXJuXG4gICAgICBpZiBtc2cgaXMgXCJcIiBhbmQgcmVwbHkubGVuZ3RoXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUgcmVwbHlbMF1cbiAgICAgIGVsc2UgaWYgbXNnIGFuZCByZXBseS5sZW5ndGggPT0gMFxuICAgICAgICBjb25zb2xlLmVycm9yIG1zZ1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QgbXNnXG4gICAgICBlbHNlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IgXCJiYWQgcnBjIHJlcGx5XCIsIG4sIG1zZywgcmVwbHkuLi5cbiAgICAgIGRlbGV0ZSBycGNQcm9taXNlc1tuXVxuICAgIGVsc2UgaWYgZW1pdHRlclxuICAgICAgaWYgbXNnIGFuZCByZXBseS5sZW5ndGhcbiAgICAgICAgZW1pdHRlci5lbWl0IG1zZywgcmVwbHlbMF1cbiAgICAgIGVsc2VcbiAgICAgICAgZGVsZXRlIHJwY1Byb21pc2VzW25dICMgc3RvcCBzdHJlYW1pbmdcbiAgICAgICAgZW1pdHRlci5lbWl0ICdjbG9zZScsIHJlcGx5WzBdXG4gICAgZWxzZVxuICAgICAgY29uc29sZS5lcnJvciBcInNwdXJpb3VzIHJwYyByZXBseVwiLCBuLCBtc2csIHJlcGx5Li4uXG5cbiAgIyBTZXQgdXAgYSB3ZWJzb2NrZXQgY29ubmVjdGlvbiB0byB0aGUgSmVlQnVzIHNlcnZlci5cbiAgIyBUaGUgYXBwVGFnIGlzIHRoZSBkZWZhdWx0IHRhZyB0byB1c2Ugd2hlbiBzZW5kaW5nIHJlcXVlc3RzIHRvIGl0LlxuICBjb25uZWN0ID0gKGFwcFRhZykgLT5cblxuICAgIHJlY29ubmVjdCA9IChmaXJzdENhbGwpIC0+XG4gICAgICAjIHRoZSB3ZWJzb2NrZXQgaXMgc2VydmVkIGZyb20gdGhlIHNhbWUgc2l0ZSBhcyB0aGUgd2ViIHBhZ2VcbiAgICAgIHdzID0gbmV3IFdlYlNvY2tldCBcIndzOi8vI3tsb2NhdGlvbi5ob3N0fS93c1wiLCBbYXBwVGFnXVxuXG4gICAgICB3cy5vbm9wZW4gPSAtPlxuICAgICAgICAjIGxvY2F0aW9uLnJlbG9hZCgpICB1bmxlc3MgZmlyc3RDYWxsXG4gICAgICAgIGNvbnNvbGUubG9nICdXUyBPcGVuJ1xuICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSAtPlxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCAnd3Mtb3BlbidcblxuICAgICAgd3Mub25tZXNzYWdlID0gKG0pIC0+XG4gICAgICAgIGlmIG0uZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICAgICAgICAgY29uc29sZS5sb2cgJ2JpbmFyeSBtc2cnLCBtXG4gICAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UgbS5kYXRhXG4gICAgICAgICAgc3dpdGNoIHR5cGVvZiBkYXRhXG4gICAgICAgICAgICB3aGVuICdvYmplY3QnXG4gICAgICAgICAgICAgIGlmIEFycmF5LmlzQXJyYXkgZGF0YVxuICAgICAgICAgICAgICAgIHByb2Nlc3NScGNSZXBseSBkYXRhLi4uXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyBcInNwdXJpb3VzIG9iamVjdCByZWNlaXZlZFwiOiBtXG4gICAgICAgICAgICB3aGVuICdib29sZWFuJ1xuICAgICAgICAgICAgICBpZiBkYXRhICMgcmVsb2FkIGFwcFxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQgdHJ1ZVxuICAgICAgICAgICAgICBlbHNlICMgcmVmcmVzaCBzdHlsZXNoZWV0c1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiQ1NTIFJlbG9hZFwiXG4gICAgICAgICAgICAgICAgZm9yIGUgaW4gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgJ2xpbmsnXG4gICAgICAgICAgICAgICAgICBpZiBlLmhyZWYgYW5kIC9zdHlsZXNoZWV0L2kudGVzdCBlLnJlbFxuICAgICAgICAgICAgICAgICAgICBlLmhyZWYgPSBcIiN7ZS5ocmVmLnJlcGxhY2UgL1xcPy4qLywgJyd9PyN7RGF0ZS5ub3coKX1cIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyAnU2VydmVyIG1zZzonLCBkYXRhXG5cbiAgICAgICMgd3Mub25lcnJvciA9IChlKSAtPlxuICAgICAgIyAgIGNvbnNvbGUubG9nICdFcnJvcicsIGVcblxuICAgICAgd3Mub25jbG9zZSA9IC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdXUyBMb3N0J1xuICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSAtPlxuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCAnd3MtbG9zdCdcbiAgICAgICAgc2V0VGltZW91dCByZWNvbm5lY3QsIDEwMDBcblxuICAgIHJlY29ubmVjdCB0cnVlXG4gICBcbiAgIyBTZW5kIGEgcGF5bG9hZCB0byB0aGUgSmVlQnVzIHNlcnZlciBvdmVyIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbi5cbiAgIyBUaGUgcGF5bG9hZCBzaG91bGQgYmUgYW4gb2JqZWN0IChhbnl0aGluZyBidXQgYXJyYXkgaXMgc3VwcG9ydGVkIGZvciBub3cpLlxuICBzZW5kID0gKHBheWxvYWQpIC0+XG4gICAgd3Muc2VuZCBhbmd1bGFyLnRvSnNvbiBwYXlsb2FkXG4gICAgQFxuXG4gICMgRmV0Y2ggYSBrZXkvdmFsdWUgcGFpciBmcm9tIHRoZSBzZXJ2ZXIgZGF0YWJhc2UsIHZhbHVlIHJldHVybmVkIGFzIHByb21pc2UuXG4gIGdldCA9IChrZXkpIC0+XG4gICAgcnBjICdnZXQnLCBrZXlcbiAgICAgIFxuICAjIFN0b3JlIGEga2V5L3ZhbHVlIHBhaXIgaW4gdGhlIHNlcnZlciBkYXRhYmFzZS5cbiAgcHV0ID0gKGtleSwgdmFsdWUpIC0+XG4gICAgc2VuZCBbMCwgJ3B1dCcsIGtleSwgdmFsdWVdXG4gICAgQFxuICAgICAgXG4gICMgUGVyZm9ybSBhbiBSUEMgY2FsbCwgaS5lLiByZWdpc3RlciByZXN1bHQgY2FsbGJhY2sgYW5kIHJldHVybiBhIHByb21pc2UuXG4gIHJwYyA9IChjbWQsIGFyZ3MuLi4pIC0+XG4gICAgZCA9ICRxLmRlZmVyKClcbiAgICBuID0gKytzZXFOdW1cbiAgICB3cy5zZW5kIGFuZ3VsYXIudG9Kc29uIFtjbWQsIG4sIGFyZ3MuLi5dXG4gICAgdCA9IHNldFRpbWVvdXQgLT5cbiAgICAgIGNvbnNvbGUuZXJyb3IgXCJSUEMgI3tufTogbm8gcmVwb25zZVwiLCBhcmdzXG4gICAgICBkZWxldGUgcnBjUHJvbWlzZXNbbl1cbiAgICAgICRyb290U2NvcGUuJGFwcGx5IC0+XG4gICAgICAgIGQucmVqZWN0KClcbiAgICAsIDEwMDAwICMgMTAgc2Vjb25kcyBzaG91bGQgYmUgZW5vdWdoIHRvIGNvbXBsZXRlIGFueSByZXF1ZXN0XG4gICAgcnBjUHJvbWlzZXNbbl0gPSB0aW1lcjogdCwgZGVmZXJyZWQ6IGRcbiAgICBkLnByb21pc2VcblxuICAjIExhdW5jaCBhIGdhZGdldCBvbiB0aGUgc2VydmVyIGFuZCByZXR1cm4gaXRzIHJlc3VsdHMgdmlhIGV2ZW50cy5cbiAgZ2FkZ2V0ID0gKGFyZ3MuLi4pIC0+XG4gICAgZSA9IG5ldyBFdmVudEVtaXR0ZXJcbiAgICBycGMgYXJncy4uLlxuICAgICAgLnRoZW4gKGVlU2V0dGVyKSAtPlxuICAgICAgICBlZVNldHRlciBlXG4gICAgZVxuICBcbiAgYXR0YWNoID0gKHRhYmxlLCByb3dIYW5kbGVyKSAtPlxuICAgIGcgPSBnYWRnZXQgJ0F0dGFjaCcsIEluOiBcIi8je3RhYmxlfS9cIlxuXG4gICAgZy5nZXQgPSAoa2V5KSAtPlxuICAgICAgQHJvd3NbQGtleXNba2V5XV1cbiAgICAgIFxuICAgIGcucHV0ID0gKGtleSwgcm93KSAtPlxuICAgICAgcm93LmlkID0ga2V5XG4gICAgICBAa2V5c1tyb3cuaWRdID89IEByb3dzLmxlbmd0aFxuICAgICAgQHJvd3NbQGtleXNbcm93LmlkXV0gPSByb3dcblxuICAgIGcub24gJ091dCcsIChtKSAtPlxuICAgICAgc3dpdGNoIG0uVGFnXG4gICAgICAgIHdoZW4gJzxyYW5nZT4nIHRoZW4gQGVtaXQgJ2luaXQnLCB0YWJsZVxuICAgICAgICB3aGVuICc8c3luYz4nIHRoZW4gQGVtaXQgJ3N5bmMnLCB0YWJsZVxuICAgICAgICBlbHNlIEBlbWl0ICdkYXRhJywgbS5UYWcuc2xpY2UoMiArIHRhYmxlLmxlbmd0aCksIG0uTXNnXG4gICAgZy5vbiAnZGF0YScsIHJvd0hhbmRsZXIgPyBnLnB1dFxuXG4gICAgZy5yb3dzID0gW11cbiAgICBnLmtleXMgPSB7fVxuICAgIGdcbiAgICBcbiAgd2luZG93LnNlbmQgPSBzZW5kICMgY29uc29sZSBhY2Nlc3MsIGZvciBkZWJ1Z2dpbmdcbiAge2Nvbm5lY3Qsc2VuZCxnZXQscHV0LHJwYyxnYWRnZXQsYXR0YWNofVxuIl19
