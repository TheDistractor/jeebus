(function() {
  var ng,
    __slice = [].slice;

  ng = angular.module('myApp');

  console.log('NG', angular.version.full);

  ng.config(function($urlRouterProvider, $locationProvider) {
    $urlRouterProvider.otherwise('/');
    return $locationProvider.html5Mode(true);
  });

  ng.factory('jeebus', function($rootScope, $q) {
    var attach, connect, detach, gadget, get, processModelUpdate, processRpcReply, put, rpc, rpcPromises, send, seqNum, trackedModels, ws;
    ws = null;
    seqNum = 0;
    rpcPromises = {};
    trackedModels = {};
    processModelUpdate = function(key, value) {
      var info, k, suffix;
      for (k in trackedModels) {
        info = trackedModels[k];
        if (k === key.slice(0, k.length)) {
          suffix = key.slice(k.length);
          if (value) {
            info.model[suffix] = value;
          } else {
            delete info.model[suffix];
          }
        }
      }
      if (!suffix) {
        return console.error("spurious model update", key, value);
      }
    };
    processRpcReply = function(reply) {
      var d, e, msg, n, result, t, _ref;
      n = reply[0], msg = reply[1], result = reply[2];
      _ref = rpcPromises[n], t = _ref[0], d = _ref[1], e = _ref[2];
      if (d) {
        clearTimeout(t);
        if (msg === true) {
          rpcPromises[n][1] = null;
          return d.resolve(function(ee) {
            return rpcPromises[n][2] = ee;
          });
        } else if (msg === "" && reply.length === 3) {
          return d.resolve(result);
        } else if (msg !== "" && reply.length === 2) {
          console.error(msg);
          return d.reject(msg);
        } else {
          return console.error.apply(console, ["bad rpc reply"].concat(__slice.call(reply)));
        }
      } else if (e) {
        if (msg === false) {
          return delete rpcPromises[n];
        } else if (msg !== "" && reply.length > 2) {
          return e.emit(msg, reply.slice(2));
        } else {
          return console.error.apply(console, ["bad rpc event"].concat(__slice.call(reply)));
        }
      } else {
        return console.error.apply(console, ["spurious rpc reply"].concat(__slice.call(reply)));
      }
    };
    connect = function(appTag) {
      var reconnect;
      reconnect = function(firstCall) {
        ws = new WebSocket("ws://" + location.host + "/ws", [appTag]);
        ws.onopen = function() {
          console.log('WS Open');
          return $rootScope.$apply(function() {
            return $rootScope.serverStatus = 'connected';
          });
        };
        ws.onmessage = function(m) {
          if (m.data instanceof ArrayBuffer) {
            console.log('binary msg', m);
          }
          return $rootScope.$apply(function() {
            var data, e, k, v, _i, _len, _ref, _results, _results1;
            data = JSON.parse(m.data);
            switch (typeof data) {
              case 'object':
                if (Array.isArray(data)) {
                  return processRpcReply(data);
                } else {
                  _results = [];
                  for (k in data) {
                    v = data[k];
                    _results.push(processModelUpdate(k, v));
                  }
                  return _results;
                }
                break;
              case 'boolean':
                if (data) {
                  return window.location.reload(true);
                } else {
                  console.log("CSS Reload");
                  _ref = document.getElementsByTagName('link');
                  _results1 = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    e = _ref[_i];
                    if (e.href && /stylesheet/i.test(e.rel)) {
                      _results1.push(e.href = "" + (e.href.replace(/\?.*/, '')) + "?" + (Date.now()));
                    } else {
                      _results1.push(void 0);
                    }
                  }
                  return _results1;
                }
                break;
              default:
                return console.log('Server msg:', data);
            }
          });
        };
        return ws.onclose = function() {
          console.log('WS Closed');
          $rootScope.$apply(function() {
            return $rootScope.serverStatus = 'disconnected';
          });
          return setTimeout(reconnect, 1000);
        };
      };
      return reconnect(true);
    };
    send = function(payload) {
      ws.send(angular.toJson(payload));
      return this;
    };
    get = function(key) {
      return rpc('get', key);
    };
    put = function(key, value) {
      send([0, 'put', key, value]);
      return this;
    };
    rpc = function() {
      var args, cmd, d, n, t;
      cmd = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      d = $q.defer();
      n = ++seqNum;
      ws.send(angular.toJson([cmd, n].concat(__slice.call(args))));
      t = setTimeout(function() {
        console.error("RPC " + n + ": no reponse", args);
        delete rpcPromises[n];
        return $rootScope.$apply(function() {
          return d.reject();
        });
      }, 10000);
      rpcPromises[n] = [t, d, null];
      return d.promise;
    };
    gadget = function() {
      var args, e;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      e = new EventEmitter;
      rpc.apply(null, args).then(function(eeSetter) {
        return eeSetter(e);
      });
      return e;
    };
    attach = function(path) {
      var info;
      info = trackedModels[path] != null ? trackedModels[path] : trackedModels[path] = {
        model: {},
        count: 0
      };
      if (info.count++ === 0) {
        rpc('attach', path).then(function(r) {
          var k, v;
          for (k in r) {
            v = r[k];
            processModelUpdate(k, v);
          }
          return console.log('attach', path);
        });
      }
      return info.model;
    };
    detach = function(path) {
      if (trackedModels[path] && --trackedModels[path].count <= 0) {
        delete trackedModels[path];
        rpc('detach', path).then(function() {
          return console.log('detach', path);
        });
      }
      return this;
    };
    window.send = send;
    return {
      connect: connect,
      send: send,
      get: get,
      put: put,
      rpc: rpc,
      gadget: gadget,
      attach: attach,
      detach: detach
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
