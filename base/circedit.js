(function() {
  var findPin, ng, prepareData;

  ng = angular.module('myApp');

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, gadgetDrag, gadgets, lastg, redraw, svg, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          height: "60%"
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        lastg = gadgets = wires = null;
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        redraw = function() {
          var g, p, pins;
          lastg = prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires);
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            d.def = scope.defs[d.type];
            d.hw = d.def.width / 2;
            d.hh = d.def.height / 2;
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title;
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.name;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('rect .pin').data(function(d) {
            return d.def.pins;
          });
          p = pins.enter();
          p.append('circle').attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          }).on('mousedown', function(d) {
            return console.log('c1', d);
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 7;
              } else {
                return d.x - 7;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            d: diag
          });
          wires.exit().remove();
          return gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        };
        redraw();
        return svg.on('mousedown', function() {
          var x, y, _ref;
          _ref = d3.mouse(this), x = _ref[0], y = _ref[1];
          scope.data.gadgets.push({
            id: "g" + (++lastg),
            x: x | 0,
            y: y | 0,
            title: 'Gadget Two',
            type: 'Pipe'
          });
          return redraw();
        });
      }
    };
  });

  findPin = function(name, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.def.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g,
              p: p
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, n, outs, p, seq, step, yIn, yOut, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    for (n in gdefs) {
      d = gdefs[n];
      d.name || (d.name = n);
      ins = 0;
      _ref = d.pins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.x = d.width / 2;
        if (p.dir === 'in') {
          p.x = -p.x;
          ++ins;
        }
      }
      outs = d.pins.length - ins;
      step = 16;
      yIn = -(ins - 1) * step / 2;
      yOut = -(outs - 1) * step / 2;
      _ref1 = d.pins;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        if (p.dir === 'in') {
          p.y = yIn;
          yIn += step;
        } else {
          p.y = yOut;
          yOut += step;
        }
      }
      d.height = 30 + step * (ins > outs ? ins : outs);
    }
    seq = '';
    _ref2 = gdata.gadgets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      d = _ref2[_k];
      if (d.id > seq) {
        seq = d.id;
      }
      d.def = gdefs[d.type];
      d.hw = d.def.width / 2;
      d.hh = d.def.height / 2;
    }
    _ref3 = gdata.wires;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      d = _ref3[_l];
      d.source = findPin(d.from, gdata.gadgets);
      d.target = findPin(d.to, gdata.gadgets);
    }
    return seq.slice(1) | 0;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
