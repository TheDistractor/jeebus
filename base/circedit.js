(function() {
  var findPin, ng, prepareData;

  ng = angular.module('myApp');

  ng.directive('circuitEditor', function() {
    return {
      restrict: 'E',
      scope: {
        defs: '=',
        data: '='
      },
      link: function(scope, elem, attr) {
        var diag, dragDest, dragInfo, dragWire, gadgetDrag, gadgets, lastg, pinDrag, redraw, svg, wires;
        svg = d3.select(elem[0]).append('svg').attr({
          height: "60%"
        });
        diag = d3.svg.diagonal().projection(function(d) {
          return [d.y, d.x];
        });
        lastg = gadgets = wires = null;
        gadgetDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          this.parentNode.appendChild(this);
          return d3.event.sourceEvent.stopPropagation();
        }).on('drag', function(d) {
          d.x = d3.event.x | 0;
          d.y = d3.event.y | 0;
          d3.select(this).attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
          return wires.filter(function(w) {
            return w.source.g === d || w.target.g === d;
          }).each(function(d) {
            d.source = findPin(d.from, scope.data.gadgets);
            return d.target = findPin(d.to, scope.data.gadgets);
          }).attr({
            d: diag
          });
        }).on('dragend', function(d) {
          return console.log('save gadget', d);
        });
        dragInfo = {};
        dragWire = svg.append('path').datum(dragInfo).attr({
          "class": 'drag'
        });
        dragDest = null;
        pinDrag = d3.behavior.drag().origin(Object).on('dragstart', function(d) {
          console.log('ds', d);
          this.parentNode.appendChild(this);
          d3.event.sourceEvent.stopPropagation();
          dragInfo.from = d.pin;
          return dragInfo.source = findPin(d.pin, scope.data.gadgets);
        }).on('drag', function(d) {
          var mx, my, orig, _ref;
          _ref = d3.mouse(this), mx = _ref[0], my = _ref[1];
          orig = dragInfo.source;
          dragInfo.target = {
            x: orig.x + my - d.y,
            y: orig.y + mx - d.x
          };
          console.log('od', mx, my, orig);
          dragWire.style({
            stroke: 'red'
          });
          return dragWire.attr({
            d: diag
          });
        }).on('dragend', function(d) {
          dragWire.style({
            stroke: 'none'
          });
          if (dragInfo.to) {
            console.log('add wire', dragInfo, dragDest);
            scope.data.wires.push({
              from: dragInfo.from,
              to: dragInfo.to
            });
            delete dragInfo.to;
            return redraw();
          }
        });
        redraw = function() {
          var g, p, pins;
          lastg = prepareData(scope.defs, scope.data);
          gadgets = svg.selectAll('.gadget').data(scope.data.gadgets, function(d) {
            return d.id;
          });
          wires = svg.selectAll('.wire').data(scope.data.wires);
          g = gadgets.enter().append('g').call(gadgetDrag).attr({
            "class": 'gadget'
          });
          g.append('rect').each(function(d) {
            d.def = scope.defs[d.type];
            d.hw = d.def.width / 2;
            d.hh = d.def.height / 2;
            return d3.select(this).attr({
              "class": 'outline',
              x: 0.5 - d.hw,
              y: 0.5 - d.hh,
              width: 2 * d.hw,
              height: 2 * d.hh
            });
          }).style({
            fill: function(d) {
              return d.def.shade;
            }
          });
          g.append('text').text(function(d) {
            return d.title;
          }).attr({
            "class": 'title',
            y: function(d) {
              return 12 - d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.name;
          }).attr({
            "class": 'type',
            y: function(d) {
              return -4 + d.hh;
            }
          });
          g.append('text').text(function(d) {
            return d.def.icon;
          }).attr({
            "class": 'iconfont',
            x: 0,
            y: 0
          });
          gadgets.exit().remove();
          pins = gadgets.selectAll('.pin').data(function(d) {
            var p, _i, _len, _ref, _results;
            _ref = d.def.pins;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              _results.push({
                x: p.x,
                y: p.y,
                name: p.name,
                dir: p.dir,
                pin: "" + d.id + "." + p.name
              });
            }
            return _results;
          });
          p = pins.enter();
          p.append('circle').call(pinDrag).attr({
            "class": 'pin',
            cx: (function(d) {
              return d.x + .5;
            }),
            cy: (function(d) {
              return d.y + .5;
            }),
            r: 3
          }).on('mouseup', function(d) {
            return dragInfo.to = d.pin;
          });
          p.append('text').text(function(d) {
            return d.name;
          }).attr({
            "class": function(d) {
              return d.dir;
            },
            x: function(d) {
              if (d.dir === 'in') {
                return d.x + 7;
              } else {
                return d.x - 7;
              }
            },
            y: function(d) {
              return d.y + 5;
            }
          });
          pins.exit().remove();
          wires.enter().insert('path', 'g').attr({
            "class": 'wire',
            d: diag
          });
          wires.exit().remove();
          return gadgets.attr({
            transform: function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            }
          });
        };
        redraw();
        return svg.on('mousedown', function() {
          var x, y, _ref;
          _ref = d3.mouse(this), x = _ref[0], y = _ref[1];
          scope.data.gadgets.push({
            id: "g" + (++lastg),
            x: x | 0,
            y: y | 0,
            title: 'Gadget Two',
            type: 'Pipe'
          });
          return redraw();
        });
      }
    };
  });

  findPin = function(name, gdata) {
    var g, gid, p, pname, _i, _j, _len, _len1, _ref, _ref1;
    _ref = name.split('.'), gid = _ref[0], pname = _ref[1];
    for (_i = 0, _len = gdata.length; _i < _len; _i++) {
      g = gdata[_i];
      if (gid === g.id) {
        _ref1 = g.def.pins;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          if (pname === p.name) {
            return {
              y: g.x + p.x + .5,
              x: g.y + p.y + .5,
              g: g,
              p: p
            };
          }
        }
      }
    }
  };

  prepareData = function(gdefs, gdata) {
    var d, ins, n, outs, p, seq, step, yIn, yOut, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    for (n in gdefs) {
      d = gdefs[n];
      d.name || (d.name = n);
      ins = 0;
      _ref = d.pins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.x = d.width / 2;
        if (p.dir === 'in') {
          p.x = -p.x;
          ++ins;
        }
      }
      outs = d.pins.length - ins;
      step = 16;
      yIn = -(ins - 1) * step / 2;
      yOut = -(outs - 1) * step / 2;
      _ref1 = d.pins;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        if (p.dir === 'in') {
          p.y = yIn;
          yIn += step;
        } else {
          p.y = yOut;
          yOut += step;
        }
      }
      d.height = 30 + step * (ins > outs ? ins : outs);
    }
    seq = '';
    _ref2 = gdata.gadgets;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      d = _ref2[_k];
      if (/^g\d+$/.test(d.id) && d.id > seq) {
        seq = d.id;
      }
      d.def = gdefs[d.type];
      d.hw = d.def.width / 2;
      d.hh = d.def.height / 2;
    }
    _ref3 = gdata.wires;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      d = _ref3[_l];
      d.source = findPin(d.from, gdata.gadgets);
      d.target = findPin(d.to, gdata.gadgets);
    }
    return seq.slice(1) | 0;
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2lyY2VkaXQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQSx3QkFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLFNBQUgsQ0FBYSxlQUFiLEVBQThCLFNBQUEsR0FBQTtXQUM1QjtBQUFBLE1BQUEsUUFBQSxFQUFVLEdBQVY7QUFBQSxNQUVBLEtBQUEsRUFDRTtBQUFBLFFBQUEsSUFBQSxFQUFNLEdBQU47QUFBQSxRQUNBLElBQUEsRUFBTSxHQUROO09BSEY7QUFBQSxNQU1BLElBQUEsRUFBTSxTQUFDLEtBQUQsRUFBUSxJQUFSLEVBQWMsSUFBZCxHQUFBO0FBQ0osWUFBQSwyRkFBQTtBQUFBLFFBQUEsR0FBQSxHQUFNLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBSyxDQUFBLENBQUEsQ0FBZixDQUFrQixDQUFDLE1BQW5CLENBQTBCLEtBQTFCLENBQ0osQ0FBQyxJQURHLENBQ0U7QUFBQSxVQUFBLE1BQUEsRUFBUSxLQUFSO1NBREYsQ0FBTixDQUFBO0FBQUEsUUFFQSxJQUFBLEdBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFQLENBQUEsQ0FDTCxDQUFDLFVBREksQ0FDTyxTQUFDLENBQUQsR0FBQTtpQkFBTyxDQUFDLENBQUMsQ0FBQyxDQUFILEVBQU0sQ0FBQyxDQUFDLENBQVIsRUFBUDtRQUFBLENBRFAsQ0FGUCxDQUFBO0FBQUEsUUFLQSxLQUFBLEdBQVEsT0FBQSxHQUFVLEtBQUEsR0FBUSxJQUwxQixDQUFBO0FBQUEsUUFPQSxVQUFBLEdBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFaLENBQUEsQ0FDWCxDQUFDLE1BRFUsQ0FDSCxNQURHLENBRVgsQ0FBQyxFQUZVLENBRVAsV0FGTyxFQUVNLFNBQUMsQ0FBRCxHQUFBO0FBQ2YsVUFBQSxJQUFDLENBQUEsVUFBVSxD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QUFRLENBQUMsQ0FBQyxFQUFWLEVBQWMsS0FBSyxDQUFDLE9BQXBCLENBRFgsQ0FERjtBQUFBLEtBNUJBO0FBZ0NBLFdBQU8sR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsR0FBZSxDQUF0QixDQWxDWTtFQUFBLENBNUhkLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5kaXJlY3RpdmUgJ2NpcmN1aXRFZGl0b3InLCAtPlxuICByZXN0cmljdDogJ0UnXG4gIFxuICBzY29wZTpcbiAgICBkZWZzOiAnPSdcbiAgICBkYXRhOiAnPSdcbiAgICBcbiAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSAtPiAgICBcbiAgICBzdmcgPSBkMy5zZWxlY3QoZWxlbVswXSkuYXBwZW5kICdzdmcnXG4gICAgICAuYXR0ciBoZWlnaHQ6IFwiNjAlXCJcbiAgICBkaWFnID0gZDMuc3ZnLmRpYWdvbmFsKClcbiAgICAgIC5wcm9qZWN0aW9uIChkKSAtPiBbZC55LCBkLnhdICMgdW5kbyB0aGUgeC95IHJldmVyc2FsIGZyb20gZmluZFBpblxuICAgIFxuICAgIGxhc3RnID0gZ2FkZ2V0cyA9IHdpcmVzID0gbnVsbFxuICAgIFxuICAgIGdhZGdldERyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgIC5vcmlnaW4gT2JqZWN0XG4gICAgICAub24gJ2RyYWdzdGFydCcsIChkKSAtPlxuICAgICAgICBAcGFyZW50Tm9kZS5hcHBlbmRDaGlsZCBAICMgbW92ZSB0byBmcm9udFxuICAgICAgICBkMy5ldmVudC5zb3VyY2VFdmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgLm9uICdkcmFnJywgKGQpIC0+XG4gICAgICAgIGQueCA9IGQzLmV2ZW50LnggfCAwICMgc3RheSBvbiBpbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgZC55ID0gZDMuZXZlbnQueSB8IDAgIyBzdGF5IG9uIGludCBjb29yZGluYXRlc1xuICAgICAgICBkMy5zZWxlY3QoQCkuYXR0ciB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgICAgICMgcmVjYWxjdWxhdGUgZW5kcG9pbnRzIGFuZCByZWRyYXcgYWxsIHdpcmVzIGF0dGFjaGVkIHRvIHRoaXMgZ2FkZ2V0XG4gICAgICAgIHdpcmVzLmZpbHRlciAodykgLT4gdy5zb3VyY2UuZyBpcyBkIG9yIHcudGFyZ2V0LmcgaXMgZFxuICAgICAgICAgIC5lYWNoIChkKSAtPlxuICAgICAgICAgICAgZC5zb3VyY2UgPSBmaW5kUGluIGQuZnJvbSwgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgICBkLnRhcmdldCA9IGZpbmRQaW4gZC50bywgc2NvcGUuZGF0YS5nYWRnZXRzXG4gICAgICAgICAgLmF0dHIgZDogZGlhZ1xuICAgICAgLm9uICdkcmFnZW5kJywgKGQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdzYXZlIGdhZGdldCcsIGQgIyBUT0RPOiBzYXZlIHRvIHNlcnZlclxuXG4gICAgZHJhZ0luZm8gPSB7fVxuICAgIGRyYWdXaXJlID0gc3ZnLmFwcGVuZCgncGF0aCcpLmRhdHVtKGRyYWdJbmZvKS5hdHRyIGNsYXNzOiAnZHJhZydcbiAgICBkcmFnRGVzdCA9IG51bGxcblxuICAgIHBpbkRyYWcgPSBkMy5iZWhhdmlvci5kcmFnKClcbiAgICAgIC5vcmlnaW4gT2JqZWN0XG4gICAgICAub24gJ2RyYWdzdGFydCcsIChkKSAtPlxuICAgICAgICBjb25zb2xlLmxvZyAnZHMnLCBkXG4gICAgICAgIEBwYXJlbnROb2RlLmFwcGVuZENoaWxkIEAgIyBtb3ZlIHRvIGZyb250XG4gICAgICAgIGQzLmV2ZW50LnNvdXJjZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIGRyYWdJbmZvLmZyb20gPSBkLnBpblxuICAgICAgICBkcmFnSW5mby5zb3VyY2UgPSBmaW5kUGluIGQucGluLCBzY29wZS5kYXRhLmdhZGdldHNcbiAgICAgIC5vbiAnZHJhZycsIChkKSAtPlxuICAgICAgICBbbXgsbXldID0gZDMubW91c2UoQClcbiAgICAgICAgb3JpZyA9IGRyYWdJbmZvLnNvdXJjZVxuICAgICAgICBkcmFnSW5mby50YXJnZXQgPSB4OiBvcmlnLngrbXktZC55LCB5OiBvcmlnLnkrbXgtZC54ICMgZmxpcHBlZFxuICAgICAgICBjb25zb2xlLmxvZyAnb2QnLCBteCwgbXksIG9yaWdcbiAgICAgICAgZHJhZ1dpcmUuc3R5bGUgc3Ryb2tlOiAncmVkJ1xuICAgICAgICBkcmFnV2lyZS5hdHRyIGQ6IGRpYWdcbiAgICAgIC5vbiAnZHJhZ2VuZCcsIChkKSAtPlxuICAgICAgICBkcmFnV2lyZS5zdHlsZSBzdHJva2U6ICdub25lJ1xuICAgICAgICBpZiBkcmFnSW5mby50b1xuICAgICAgICAgIGNvbnNvbGUubG9nICdhZGQgd2lyZScsIGRyYWdJbmZvLCBkcmFnRGVzdCAjIFRPRE86IHNhdmUgdG8gc2VydmVyXG4gICAgICAgICAgc2NvcGUuZGF0YS53aXJlcy5wdXNoIGZyb206IGRyYWdJbmZvLmZyb20sIHRvOiBkcmFnSW5mby50b1xuICAgICAgICAgIGRlbGV0ZSBkcmFnSW5mby50b1xuICAgICAgICAgIHJlZHJhdygpXG5cbiAgICByZWRyYXcgPSAtPlxuICAgICAgbGFzdGcgPSBwcmVwYXJlRGF0YSBzY29wZS5kZWZzLCBzY29wZS5kYXRhXG4gICAgICBnYWRnZXRzID0gc3ZnLnNlbGVjdEFsbCgnLmdhZGdldCcpLmRhdGEgc2NvcGUuZGF0YS5nYWRnZXRzLCAoZCkgLT4gZC5pZFxuICAgICAgd2lyZXMgPSBzdmcuc2VsZWN0QWxsKCcud2lyZScpLmRhdGEgc2NvcGUuZGF0YS53aXJlc1xuXG4gICAgICBnID0gZ2FkZ2V0cy5lbnRlcigpLmFwcGVuZCgnZycpLmNhbGwoZ2FkZ2V0RHJhZylcbiAgICAgICAgLmF0dHIgY2xhc3M6ICdnYWRnZXQnXG4gICAgICBnLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5lYWNoIChkKSAtPlxuICAgICAgICAgIGQuZGVmID0gc2NvcGUuZGVmc1tkLnR5cGVdXG4gICAgICAgICAgZC5odyA9IGQuZGVmLndpZHRoIC8gMlxuICAgICAgICAgIGQuaGggPSBkLmRlZi5oZWlnaHQgLyAyXG4gICAgICAgICAgZDMuc2VsZWN0KEApLmF0dHJcbiAgICAgICAgICAgIGNsYXNzOiAnb3V0bGluZSdcbiAgICAgICAgICAgICMgMXB4IGxpbmVzIHJlbmRlciBzaGFycGx5IHdoZW4gb24gYSAwLjVweCBvZmZzZXRcbiAgICAgICAgICAgIHg6IDAuNSAtIGQuaHcsIHk6IDAuNSAtIGQuaGhcbiAgICAgICAgICAgIHdpZHRoOiAyICogZC5odywgaGVpZ2h0OiAyICogZC5oaFxuICAgICAgICAuc3R5bGUgZmlsbDogKGQpIC0+IGQuZGVmLnNoYWRlXG4gICAgICBnLmFwcGVuZCgndGV4dCcpLnRleHQgKGQpIC0+IGQudGl0bGVcbiAgICAgICAgLmF0dHIgY2xhc3M6ICd0aXRsZScsIHk6IChkKSAtPiAxMiAtIGQuaGhcbiAgICAgIGcuYXBwZW5kKCd0ZXh0JykudGV4dCAoZCkgLT4gZC5kZWYubmFtZVxuICAgICAgICAuYXR0ciBjbGFzczogJ3R5cGUnLCB5OiAoZCkgLT4gLTQgKyBkLmhoXG4gICAgICBnLmFwcGVuZCgndGV4dCcpLnRleHQgKGQpIC0+IGQuZGVmLmljb25cbiAgICAgICAgLmF0dHIgY2xhc3M6ICdpY29uZm9udCcsIHg6IDAsIHk6IDBcbiAgICAgIGdhZGdldHMuZXhpdCgpLnJlbW92ZSgpXG4gICAgICAgIFxuICAgICAgcGlucyA9IGdhZGdldHMuc2VsZWN0QWxsKCcucGluJykuZGF0YSAoZCkgLT5cbiAgICAgICAgZm9yIHAgaW4gZC5kZWYucGluc1xuICAgICAgICAgIHg6IHAueCwgeTogcC55LCBuYW1lOiBwLm5hbWUsIGRpcjogcC5kaXIsIHBpbjogXCIje2QuaWR9LiN7cC5uYW1lfVwiXG4gICAgICBwID0gcGlucy5lbnRlcigpXG4gICAgICBwLmFwcGVuZCgnY2lyY2xlJykuY2FsbChwaW5EcmFnKVxuICAgICAgICAuYXR0ciBjbGFzczogJ3BpbicsIGN4OiAoKGQpIC0+IGQueCsuNSksIGN5OiAoKGQpIC0+IGQueSsuNSksIHI6IDNcbiAgICAgICAgLm9uICdtb3VzZXVwJywgKGQpIC0+IGRyYWdJbmZvLnRvID0gZC5waW5cbiAgICAgIHAuYXBwZW5kKCd0ZXh0JykudGV4dCAoZCkgLT4gZC5uYW1lXG4gICAgICAgIC5hdHRyXG4gICAgICAgICAgY2xhc3M6IChkKSAtPiBkLmRpclxuICAgICAgICAgIHg6IChkKSAtPiBpZiBkLmRpciBpcyAnaW4nIHRoZW4gZC54ICsgNyBlbHNlIGQueCAtIDdcbiAgICAgICAgICB5OiAoZCkgLT4gZC55ICsgNVxuICAgICAgcGlucy5leGl0KCkucmVtb3ZlKClcblxuICAgICAgd2lyZXMuZW50ZXIoKS5pbnNlcnQoJ3BhdGgnLCAnZycpICMgdXNlcyBpbnNlcnQgdG8gbW92ZSB0byBiYWNrIHJpZ2h0IGF3YXlcbiAgICAgICAgLmF0dHIgY2xhc3M6ICd3aXJlJywgZDogZGlhZ1xuICAgICAgd2lyZXMuZXhpdCgpLnJlbW92ZSgpXG5cbiAgICAgIGdhZGdldHMuYXR0ciB0cmFuc2Zvcm06IChkKSAtPiBcInRyYW5zbGF0ZSgje2QueH0sI3tkLnl9KVwiXG4gICAgXG4gICAgcmVkcmF3KClcbiAgICBcbiAgICBzdmcub24gJ21vdXNlZG93bicsIC0+XG4gICAgICAjIHJldHVybiAgaWYgZDMuZXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgW3gseV0gPSBkMy5tb3VzZSBAXG4gICAgICBzY29wZS5kYXRhLmdhZGdldHMucHVzaFxuICAgICAgICBpZDogXCJnI3srK2xhc3RnfVwiLCB4OiB4fDAsIHk6IHl8MCwgdGl0bGU6ICdHYWRnZXQgVHdvJywgdHlwZTogJ1BpcGUnXG4gICAgICByZWRyYXcoKVxuXG5maW5kUGluID0gKG5hbWUsIGdkYXRhKSAtPlxuICBbZ2lkLHBuYW1lXSA9IG5hbWUuc3BsaXQgJy4nXG4gIGZvciBnIGluIGdkYXRhIHdoZW4gZ2lkIGlzIGcuaWRcbiAgICBmb3IgcCBpbiBnLmRlZi5waW5zIHdoZW4gcG5hbWUgaXMgcC5uYW1lXG4gICAgICAjIHJldmVyc2VzIHggYW5kIHkgYW5kIHVzZXMgcHJvamVjdGlvbiB0byBnZXQgaG9yaXpvbnRhbCBzcGxpbmVzXG4gICAgICByZXR1cm4geTogZy54ICsgcC54ICsgLjUsIHg6IGcueSArIHAueSArIC41LCBnOiBnLCBwOiBwXG5cbnByZXBhcmVEYXRhID0gKGdkZWZzLCBnZGF0YSkgLT5cbiAgIyBwcmUtY2FsY3VsYXRlIHNpemVzIGFuZCByZWxhdGl2ZSBwaW4gY29vcmRpbmF0ZXNcbiAgZm9yIG4sIGQgb2YgZ2RlZnNcbiAgICBkLm5hbWUgb3I9IG5cbiAgICBpbnMgPSAwXG4gICAgZm9yIHAgaW4gZC5waW5zXG4gICAgICBwLnggPSBkLndpZHRoIC8gMlxuICAgICAgaWYgcC5kaXIgaXMgJ2luJ1xuICAgICAgICBwLnggPSAtcC54XG4gICAgICAgICsraW5zXG4gICAgb3V0cyA9IGQucGlucy5sZW5ndGggLSBpbnNcbiAgICBzdGVwID0gMTZcbiAgICB5SW4gPSAtIChpbnMgLSAxKSAqIHN0ZXAgLyAyXG4gICAgeU91dCA9IC0gKG91dHMgLSAxKSAqIHN0ZXAgLyAyXG4gICAgZm9yIHAgaW4gZC5waW5zXG4gICAgICBpZiBwLmRpciBpcyAnaW4nXG4gICAgICAgIHAueSA9IHlJblxuICAgICAgICB5SW4gKz0gc3RlcFxuICAgICAgZWxzZVxuICAgICAgICBwLnkgPSB5T3V0XG4gICAgICAgIHlPdXQgKz0gc3RlcFxuICAgIGQuaGVpZ2h0ID0gMzAgKyBzdGVwICogKGlmIGlucyA+IG91dHMgdGhlbiBpbnMgZWxzZSBvdXRzKVxuXG4gIHNlcSA9ICcnICMgZmluZCB0aGUgbGFyZ2VzdCBcImc8bj5cIiBpZCB0byBoZWxwIGdlbmVyYXRlIHRoZSBuZXh0IG9uZVxuICBmb3IgZCBpbiBnZGF0YS5nYWRnZXRzXG4gICAgc2VxID0gZC5pZCAgaWYgL15nXFxkKyQvLnRlc3QoZC5pZCkgYW5kIGQuaWQgPiBzZXFcbiAgICBkLmRlZiA9IGdkZWZzW2QudHlwZV1cbiAgICBkLmh3ID0gZC5kZWYud2lkdGggLyAyXG4gICAgZC5oaCA9IGQuZGVmLmhlaWdodCAvIDJcblxuICBmb3IgZCBpbiBnZGF0YS53aXJlc1xuICAgIGQuc291cmNlID0gZmluZFBpbiBkLmZyb20sIGdkYXRhLmdhZGdldHNcbiAgICBkLnRhcmdldCA9IGZpbmRQaW4gZC50bywgZ2RhdGEuZ2FkZ2V0c1xuICAgIFxuICByZXR1cm4gc2VxLnNsaWNlKDEpIHwgMCAjIGRyb3AgdGhlIGxlYWRpbmcgXCJnXCIsIHJldHVybiBhcyBpbnRcbiJdfQ==
