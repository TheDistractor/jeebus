(function() {
  var coffee, compileCoffeeScriptWithMap, compileIfNeeded, convert, createWatcher, execFile, fatal, fs, gin, http, installGin, jade, moduleDir, parseSettings, path, ready, reload, runGin, settings, spawn, stylus, timer, traverseDirs, triggerRefresh, watchDir, _ref,
    __slice = [].slice;

  fs = require('fs');

  http = require('http');

  path = require('path');

  _ref = require('child_process'), execFile = _ref.execFile, spawn = _ref.spawn;

  moduleDir = function(s) {
    return path.resolve('node_modules', s);
  };

  coffee = require(moduleDir('coffee-script'));

  convert = require(moduleDir('convert-source-map'));

  jade = require(moduleDir('jade'));

  stylus = require(moduleDir('stylus'));

  fatal = function() {
    var args, s;
    s = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.error('\n[node] fatal error:', s);
    if (args.length) {
      console.error.apply(console, args);
    }
    return process.exit(1);
  };

  runGin = function(done) {
    var p;
    p = spawn('gin', [], {
      stdio: 'pipe'
    });
    p.on('close', function(code) {
      if (code > 0) {
        return fatal('unexpected termination of "gin", code: ' + code);
      }
    });
    p.stdout.on('data', function(data) {
      var s;
      s = data.toString();
      if (data.length > 0) {
        process.stdout.write(s);
      }
      if (/listening on port/.test(s)) {
        return ready();
      }
    });
    p.stderr.on('data', function(data) {
      var s;
      s = data.toString();
      if (!/execvp\(\)/.test(s)) {
        return process.stderr.write(s);
      }
    });
    return p;
  };

  installGin = function() {
    console.log('"gin" tool not found, installing...');
    return execFile('go', ['get', 'github.com/codegangsta/gin'], function(err, sout, serr) {
      var gin;
      if (err) {
        if (err.code === 'ENOENT') {
          fatal('"go" not found - please install it first, see http://golang.org/');
        }
        fatal('install of "gin" failed', serr);
      }
      gin = runGin();
      return gin.on('error', function(err) {
        return fatal('still cannot launch "gin" - is $GOPATH/bin in your $PATH?');
      });
    });
  };

  compileCoffeeScriptWithMap = function(sourceCode, filename) {
    var comment, compiled;
    compiled = coffee.compile(sourceCode, {
      filename: filename,
      sourceMap: true,
      inline: true,
      literate: path.extname(filename) !== '.coffee'
    });
    comment = convert.fromJSON(compiled.v3SourceMap).setProperty('sources', [filename]).toComment();
    return "" + compiled.js + "\n" + comment + "\n";
  };

  compileIfNeeded = function(srcFile) {
    var destExt, destFile, destStat, err, saveResult, src, srcExt, srcStat, t;
    if (/\.(coffee|coffee\.md|litcoffee|jade|styl)$/i.test(srcFile)) {
      srcExt = path.extname(srcFile);
      destExt = (function() {
        switch (srcExt) {
          case '.jade':
            return '.html';
          case '.styl':
            return '.css';
          default:
            return '.js';
        }
      })();
      destFile = srcFile.slice(0, -srcExt.length) + destExt;
      t = Date.now();
      saveResult = function(data) {
        var ms, n;
        n = data.length;
        ms = Date.now() - t;
        console.log("[node] compile " + srcFile + " -> " + destExt + " " + n + "b " + ms + " ms");
        return fs.writeFileSync(destFile, data);
      };
      try {
        srcStat = fs.statSync(srcFile);
        if (fs.existsSync(destFile)) {
          destStat = fs.statSync(destFile);
        }
        if (!((destStat != null ? destStat.mtime : void 0) >= srcStat.mtime)) {
          src = fs.readFileSync(srcFile, {
            encoding: 'utf8'
          });
          switch (srcExt) {
            case '.jade':
              return saveResult(jade.compile(src, {
                filename: srcFile,
                pretty: true
              })());
            case '.styl':
              return stylus.render(src, {
                filename: srcFile
              }, function(err, css) {
                if (err) {
                  return console.log('[node] stylus error', srcFile, err);
                } else {
                  return saveResult(css);
                }
              });
            default:
              return saveResult(compileCoffeeScriptWithMap(src, path.basename(srcFile)));
          }
        }
      } catch (_error) {
        err = _error;
        return console.log('[node] cannot compile', srcFile, err);
      }
    } else if (/\.(html|js)$/i.test(srcFile)) {
      return triggerRefresh(true);
    } else if (/\.(css)$/i.test(srcFile)) {
      return triggerRefresh(false);
    }
  };

  traverseDirs = function(dir, cb) {
    var f, stats, _i, _len, _ref1, _results;
    stats = fs.statSync(dir);
    if (stats.isDirectory()) {
      cb(dir);
      _ref1 = fs.readdirSync(dir);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        f = _ref1[_i];
        _results.push(traverseDirs(path.join(dir, f), cb));
      }
      return _results;
    }
  };

  watchDir = function(root, cb) {
    return traverseDirs(root, function(dir) {
      return fs.watch(dir, function(event, filename) {
        var file;
        file = path.join(dir, filename);
        return cb(event, file);
      });
    });
  };

  createWatcher = function(root) {
    console.log(" ", root);
    traverseDirs(root, function(dir) {
      var f, _i, _len, _ref1;
      _ref1 = fs.readdirSync(dir);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        f = _ref1[_i];
        compileIfNeeded(path.join(dir, f));
      }
      return fs.watch(dir, function(event, filename) {
        var file;
        file = path.join(dir, filename);
        if (fs.existsSync(file)) {
          return compileIfNeeded(file);
        } else {

        }
      });
    });
    return root;
  };

  ready = function() {
    console.log('[node] watching for file changes in:');
    createWatcher(settings.AppDir || './app');
    createWatcher(settings.BaseDir || './base');
    return createWatcher(settings.CommonDir || './common');
  };

  parseSettings = function(fn) {
    var i, k, line, map, s, v, x, _i, _j, _len, _len1, _ref1, _ref2;
    map = {};
    if (fs.existsSync(fn)) {
      _ref1 = fs.readFileSync(fn, 'utf8').split('\n');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        line = _ref1[_i];
        line = line.trim();
        i = line.indexOf('=');
        if (line[0] !== '#' && i > 0) {
          x = [];
          _ref2 = line.slice(0, i).trim().split('_');
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            s = _ref2[_j];
            x.push(s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase());
          }
          k = x.join("");
          v = line.slice(i + 1).trim();
          map[k] = JSON.parse(v);
        }
      }
    }
    return map;
  };

  reload = void 0;

  timer = void 0;

  triggerRefresh = function(refresh) {
    reload || (reload = refresh);
    clearTimeout(timer);
    return timer = setTimeout(function() {
      var port;
      port = settings.Port || 3000;
      http.get("http://localhost:" + port + "/reload?" + reload).on('error', function(e) {
        return console.log("Got error: ", e.stack);
      });
      return reload = void 0;
    }, 100);
  };

  settings = parseSettings('settings.txt');

  gin = runGin();

  gin.on('error', function(err) {
    if (err.code !== 'ENOENT') {
      fatal('cannot launch "gin"', err);
    }
    return installGin();
  });

  gin.on('exit', function() {
    console.error('[node] gin exited');
    return process.exit(1);
  });

  process.on('uncaughtException', function(err) {
    console.error('[node] exception:', err.stack);
    return gin.kill();
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
