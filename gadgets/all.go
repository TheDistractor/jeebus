// Convenience package to wrap all the gadgets available in JeeBus.
package jeebus

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/golang/glog"
	"github.com/jcw/flow"
	_ "github.com/jcw/flow/gadgets"

	_ "github.com/jcw/jeebus/gadgets/database"
	_ "github.com/jcw/jeebus/gadgets/decoders"
	_ "github.com/jcw/jeebus/gadgets/fbpparse"
	_ "github.com/jcw/jeebus/gadgets/javascript"
	_ "github.com/jcw/jeebus/gadgets/network"
	_ "github.com/jcw/jeebus/gadgets/rfdata"
	_ "github.com/jcw/jeebus/gadgets/serial"
)

var Version = "0.9.0"

var Config = map[string]string{} // see LoadConfig below

var Help = map[string]string{}

func init() {
	flow.Registry["help"] = func() flow.Circuitry { return &helpCmd{} }
	Help["help"] = `Show this help text with a list of commands.`
	// database
	Help["dbdump"] = `Dump (part of) the contents of the database to stdout.`
	Help["dbexport"] = `Export (part of) the database as JSON to stdout.`
	Help["dbimport"] = `Import a JSON file, as generated by "export".`
	Help["dbget"] = `Get one entry from the database.`
	Help["dbput"] = `Store or delete an entry in the database.`
	Help["dbkeys"] = `List the set of (sub-) keys in the database.`
	// network
	Help["mqttpub"] = `Publish a message on a topic using MQTT.`
	Help["mqttsub"] = `Subscribe to one or more topics using MQTT.`
}

type helpCmd struct{ flow.Gadget }

func (g *helpCmd) Run() {
	if info, ok := Help[flag.Arg(1)]; ok {
		s := strings.SplitN(strings.TrimSpace(info), "\n", 2)
		if len(s) > 1 {
			info = s[0] + "\n\n" + s[1] + "\n"
		}
		fmt.Print(info, "\n")
		return
	}

	cmds := []string{}
	max := 0
	for name, _ := range Help {
		cmds = append(cmds, name)
		if len(name) > max {
			max = len(name)
		}
	}
	sort.Strings(cmds)
	fmt.Println("List of additional commands:\n")
	for _, name := range cmds {
		info := Help[name]
		fmt.Printf("  %-*s  %s\n", max, name, strings.SplitN(info, "\n", 2)[0])
	}
	fmt.Println("\nUse 'help <name>' for more info or '-h' for debug options.")
}

// loadConfig parses a configuration file, if it exists, to set up some basic
// application settings, such as where the app/ and data/ directories are.
// Settings can be overridden through environment variables with the same name.
func LoadConfig(defaults, filename string) map[string]string {
	parseSettingsLine := func(line string) {
		line = strings.TrimSpace(line)
		if line != "" && !strings.HasPrefix(line, "#") {
			fields := strings.SplitN(line, "=", 2)
			if len(fields) != 2 {
				panic(fmt.Errorf("cannot parse configuration: %s", line))
			}
			key := strings.TrimSpace(fields[0])
			value := strings.TrimSpace(fields[1])
			env := os.Getenv(key)
			if env != "" {
				value = env
			}
			glog.Infoln("config", key, "=", value)
			Config[key] = value
		}
	}

	for _, s := range strings.Split(defaults, "\n") {
		parseSettingsLine(s)
	}

	if fd, err := os.Open(filename); err == nil {
		defer fd.Close()
		scanner := bufio.NewScanner(fd)
		for scanner.Scan() {
			parseSettingsLine(scanner.Text())
		}
	}

	return Config
}
