// Convenience package to wrap all the gadgets available in JeeBus.
package jeebus

import (
	"flag"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/jcw/flow"
	_ "github.com/jcw/flow/gadgets"

	_ "github.com/jcw/jeebus/gadgets/database"
	_ "github.com/jcw/jeebus/gadgets/decoders"
	_ "github.com/jcw/jeebus/gadgets/fbpparse"
	_ "github.com/jcw/jeebus/gadgets/javascript"
	_ "github.com/jcw/jeebus/gadgets/network"
	_ "github.com/jcw/jeebus/gadgets/rfdata"
	_ "github.com/jcw/jeebus/gadgets/serial"
)

var Version = "0.9.0"

var helpTexts = map[string]string{}

func init() {
	flow.Registry["help"] = func() flow.Circuitry { return &helpCmd{} }

	helpTexts["dump"] = `Dump (part of) the contents of the database.`
	helpTexts["export"] = `Export (part of) the database as JSON.`
	helpTexts["import"] = `Import a JSON file, as generated by "export".`
	helpTexts["get"] = `Get one entry from the database.`
	helpTexts["put"] = `Store or delete an entry in the database.`
	helpTexts["keys"] = `List the set of (sub-) keys in the database.`
	helpTexts["main"] = `Run the default circuit defined in the setup file.`

	// special hookup if caller is node.js, to pass the PID of this process
	// yes, this is *writing* to stdin (which is used as IPC mechanism!)
	if len(os.Args) == 1 {
		// hack alert: only do this in the default case, i.e. without args
		// TODO: need a way to detect whether node.js launched this app!
		// perhaps check whether stdin is a pipe? is this portable?
		// or check that the raw stdin and stdout fd's are different
		os.Stdin.Write([]byte(fmt.Sprintf("%d\n", os.Getpid())))
	}
	// see the websocket code for how input from stdin is picked up
}

type helpCmd struct{ flow.Gadget }

func (g *helpCmd) Run() {
	if info, ok := helpTexts[flag.Arg(1)]; ok {
		s := strings.SplitN(strings.TrimSpace(info), "\n", 2)
		if len(s) > 1 {
			info = s[0] + "\n\n" + s[1] + "\n"
		}
		fmt.Print(info, "\n")
		return
	}

	cmds := []string{}
	max := 0
	for name, _ := range helpTexts {
		cmds = append(cmds, name)
		if len(name) > max {
			max = len(name)
		}
	}
	sort.Strings(cmds)
	fmt.Println("Available commands (use 'help <name>' for more info or '-h' for options):\n")
	for _, name := range cmds {
		info := helpTexts[name]
		fmt.Printf("  %-*s  %s\n", max, name, strings.SplitN(info, "\n", 2)[0])
	}
	fmt.Println()
}
