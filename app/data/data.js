(function() {
  var dataCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('data', {
      url: '/data',
      templateUrl: 'data/data.html',
      controller: dataCtrl
    });
    return navbarProvider.add('/data', 'Data', 35);
  });

  dataCtrl = function($scope, jeebus) {
    var attach;
    $scope.info = {
      driver: [
        {
          id: "id",
          name: "Parameter"
        }, {
          id: "name",
          name: "Name"
        }, {
          id: "unit",
          name: "Unit"
        }, {
          id: "factor",
          name: "Factor"
        }, {
          id: "scale",
          name: "Scale"
        }
      ],
      sensor: [
        {
          id: "id",
          name: "Id"
        }, {
          id: "loc",
          name: "Location"
        }, {
          id: "ms",
          name: "Timestamp"
        }, {
          id: "typ",
          name: "Type"
        }
      ]
    };
    $scope.tables = Object.keys($scope.info);
    console.log('ta', $scope.tables);
    $scope.table = 'driver';
    $scope.columns = $scope.info[$scope.table];
    $scope.editRow = function(row) {
      return $scope.cursor = row != null ? row : {};
    };
    jeebus.attach = function(table, rowHandler) {
      var g;
      g = jeebus.gadget('Attach', {
        In: "/" + table + "/"
      });
      g.store = function(key, row) {
        var _base, _name;
        row.id = key;
        if ((_base = this.keys)[_name = row.id] == null) {
          _base[_name] = this.rows.length;
        }
        return this.rows[this.keys[row.id]] = row;
      };
      g.on('Out', function(m) {
        switch (m.Tag) {
          case '<range>':
            return this.emit('init', table);
          case '<sync>':
            return this.emit('sync', table);
          default:
            return this.emit('data', m.Tag.slice(2 + table.length), m.Msg);
        }
      });
      g.on('data', rowHandler != null ? rowHandler : g.store);
      g.rows = [];
      g.keys = {};
      return g;
    };
    attach = function() {
      var dataHandler, dataMap, dataVec;
      jeebus.attach('table').on('sync', function() {
        return console.log(this.rows);
      });
      dataVec = $scope.rows = [];
      dataMap = {};
      dataHandler = function(tag, msg) {
        var _name;
        msg.id = tag;
        if (dataMap[_name = msg.id] == null) {
          dataMap[_name] = dataVec.length;
        }
        return dataVec[dataMap[msg.id]] = msg;
      };
      return jeebus.gadget('Attach', {
        In: "/" + $scope.table + "/"
      }).on('Out', function(m) {
        switch (m.Tag) {
          case '<range>':
            return this.emit('init');
          case '<sync>':
            return this.emit('sync');
          default:
            return this.emit('data', m.Tag.slice(2 + $scope.table.length), m.Msg);
        }
      }).on('data', dataHandler);
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLFlBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEVBQWlCLGNBQWpCLEdBQUE7QUFDUixJQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQ0U7QUFBQSxNQUFBLEdBQUEsRUFBSyxPQUFMO0FBQUEsTUFDQSxXQUFBLEVBQWEsZ0JBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxRQUZaO0tBREYsQ0FBQSxDQUFBO1dBSUEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEIsTUFBNUIsRUFBb0MsRUFBcEMsRUFMUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBU0EsUUFBQSxHQUFXLFNBQUMsTUFBRCxFQUFTLE1BQVQsR0FBQTtBQUNULFFBQUEsTUFBQTtBQUFBLElBQUEsTUFBTSxDQUFDLElBQVAsR0FDRTtBQUFBLE1BQUEsTUFBQSxFQUFRO1FBQ047QUFBQSxVQUFFLEVBQUEsRUFBSSxJQUFOO0FBQUEsVUFBWSxJQUFBLEVBQU0sV0FBbEI7U0FETSxFQUVOO0FBQUEsVUFBRSxFQUFBLEVBQUksTUFBTjtBQUFBLFVBQWMsSUFBQSxFQUFNLE1BQXBCO1NBRk0sRUFHTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE1BQU47QUFBQSxVQUFjLElBQUEsRUFBTSxNQUFwQjtTQUhNLEVBSU47QUFBQSxVQUFFLEVBQUEsRUFBSSxRQUFOO0FBQUEsVUFBZ0IsSUFBQSxFQUFNLFFBQXRCO1NBSk0sRUFLTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE9BQU47QUFBQSxVQUFlLElBQUEsRUFBTSxPQUFyQjtTQUxNO09BQVI7QUFBQSxNQU9BLE1BQUEsRUFBUTtRQUNOO0FBQUEsVUFBRSxFQUFBLEVB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RUFwRVM7RUFBQSxDQVRYLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ2RhdGEnLFxuICAgIHVybDogJy9kYXRhJ1xuICAgIHRlbXBsYXRlVXJsOiAnZGF0YS9kYXRhLmh0bWwnXG4gICAgY29udHJvbGxlcjogZGF0YUN0cmxcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvZGF0YScsICdEYXRhJywgMzVcblxuZGF0YUN0cmwgPSAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICRzY29wZS5pbmZvID1cbiAgICBkcml2ZXI6IFtcbiAgICAgIHsgaWQ6IFwiaWRcIiwgbmFtZTogXCJQYXJhbWV0ZXJcIiB9XG4gICAgICB7IGlkOiBcIm5hbWVcIiwgbmFtZTogXCJOYW1lXCIgfVxuICAgICAgeyBpZDogXCJ1bml0XCIsIG5hbWU6IFwiVW5pdFwiIH1cbiAgICAgIHsgaWQ6IFwiZmFjdG9yXCIsIG5hbWU6IFwiRmFjdG9yXCIgfVxuICAgICAgeyBpZDogXCJzY2FsZVwiLCBuYW1lOiBcIlNjYWxlXCIgfVxuICAgIF1cbiAgICBzZW5zb3I6IFtcbiAgICAgIHsgaWQ6IFwiaWRcIiwgbmFtZTogXCJJZFwiIH1cbiAgICAgIHsgaWQ6IFwibG9jXCIsIG5hbWU6IFwiTG9jYXRpb25cIiB9XG4gICAgICAjIHsgaWQ6IFwidmFsXCIsIG5hbWU6IFwiVmFsdWVzXCIgfVxuICAgICAgeyBpZDogXCJtc1wiLCBuYW1lOiBcIlRpbWVzdGFtcFwiIH1cbiAgICAgIHsgaWQ6IFwidHlwXCIsIG5hbWU6IFwiVHlwZVwiIH1cbiAgICBdXG4gIFxuICAkc2NvcGUudGFibGVzID0gT2JqZWN0LmtleXMgJHNjb3BlLmluZm9cbiAgY29uc29sZS5sb2cgJ3RhJywgJHNjb3BlLnRhYmxlc1xuICAkc2NvcGUudGFibGUgPSAnZHJpdmVyJ1xuICAjICRzY29wZS50YWJsZSA9ICdzZW5zb3InXG4gIFxuICAkc2NvcGUuY29sdW1ucyA9ICRzY29wZS5pbmZvWyRzY29wZS50YWJsZV1cblxuICAkc2NvcGUuZWRpdFJvdyA9IChyb3cpIC0+XG4gICAgJHNjb3BlLmN1cnNvciA9IHJvdyA/IHt9XG4gICAgXG4gIGplZWJ1cy5hdHRhY2ggPSAodGFibGUsIHJvd0hhbmRsZXIpIC0+XG4gICAgZyA9IGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiBcIi8je3RhYmxlfS9cIlxuXG4gICAgZy5zdG9yZSA9IChrZXksIHJvdykgLT5cbiAgICAgIHJvdy5pZCA9IGtleVxuICAgICAgQGtleXNbcm93LmlkXSA/PSBAcm93cy5sZW5ndGhcbiAgICAgIEByb3dzW0BrZXlzW3Jvdy5pZF1dID0gcm93XG5cbiAgICBnLm9uICdPdXQnLCAobSkgLT5cbiAgICAgIHN3aXRjaCBtLlRhZ1xuICAgICAgICB3aGVuICc8cmFuZ2U+JyB0aGVuIEBlbWl0ICdpbml0JywgdGFibGVcbiAgICAgICAgd2hlbiAnPHN5bmM+JyB0aGVuIEBlbWl0ICdzeW5jJywgdGFibGVcbiAgICAgICAgZWxzZSBAZW1pdCAnZGF0YScsIG0uVGFnLnNsaWNlKDIgKyB0YWJsZS5sZW5ndGgpLCBtLk1zZ1xuICAgIGcub24gJ2RhdGEnLCByb3dIYW5kbGVyID8gZy5zdG9yZVxuXG4gICAgZy5yb3dzID0gW11cbiAgICBnLmtleXMgPSB7fVxuICAgIGdcbiAgICBcbiAgYXR0YWNoID0gLT5cbiAgICBqZWVidXMuYXR0YWNoICd0YWJsZSdcbiAgICAgIC5vbiAnc3luYycsIC0+XG4gICAgICAgIGNvbnNvbGUubG9nIEByb3dzXG4gICAgICBcbiAgICBkYXRhVmVjID0gJHNjb3BlLnJvd3MgPSBbXVxuICAgIGRhdGFNYXAgPSB7fVxuXG4gICAgZGF0YUhhbmRsZXIgPSAodGFnLCBtc2cpIC0+XG4gICAgICBtc2cuaWQgPSB0YWdcbiAgICAgIGRhdGFNYXBbbXNnLmlkXSA/PSBkYXRhVmVjLmxlbmd0aFxuICAgICAgZGF0YVZlY1tkYXRhTWFwW21zZy5pZF1dID0gbXNnXG4gIFxuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiBcIi8jeyRzY29wZS50YWJsZX0vXCJcbiAgICAgIC5vbiAnT3V0JywgKG0pIC0+XG4gICAgICAgIHN3aXRjaCBtLlRhZ1xuICAgICAgICAgIHdoZW4gJzxyYW5nZT4nIHRoZW4gQGVtaXQgJ2luaXQnXG4gICAgICAgICAgd2hlbiAnPHN5bmM+JyB0aGVuIEBlbWl0ICdzeW5jJ1xuICAgICAgICAgIGVsc2UgQGVtaXQgJ2RhdGEnLCBtLlRhZy5zbGljZSgyICsgJHNjb3BlLnRhYmxlLmxlbmd0aCksIG0uTXNnXG4gICAgICAub24gJ2RhdGEnLCBkYXRhSGFuZGxlclxuXG4gIGF0dGFjaCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCAtPiBhdHRhY2goKVxuIl19
