(function() {
  var dataCtrl, ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('data', {
      url: '/data',
      templateUrl: 'data/data.html',
      controller: dataCtrl
    });
    return navbarProvider.add('/data', 'Data', 35);
  });

  dataCtrl = function($scope, jeebus) {
    var setup;
    $scope.info = {
      driver: [
        {
          id: "id",
          name: "Parameter"
        }, {
          id: "name",
          name: "Name"
        }, {
          id: "unit",
          name: "Unit"
        }, {
          id: "factor",
          name: "Factor"
        }, {
          id: "scale",
          name: "Scale"
        }
      ]
    };
    $scope.table = 'driver';
    $scope.columns = $scope.info[$scope.table];
    $scope.allowDelete = false;
    $scope.deleteRow = function() {
      if ($scope.allowDelete && ($scope.cursor != null)) {
        $scope.allowDelete = false;
        return console.log('DELETE', $scope.cursor);
      }
    };
    $scope.editRow = function(row) {
      return $scope.cursor = row;
    };
    setup = function() {
      jeebus.attach('table').on('sync', function() {
        return console.log(this.keys);
      });
      return jeebus.attach('driver').on('init', function() {
        return $scope.rows = this.rows;
      });
    };
    if ($scope.serverStatus === 'connected') {
      setup();
    }
    return $scope.$on('ws-open', setup);
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLFlBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEVBQWlCLGNBQWpCLEdBQUE7QUFDUixJQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQ0U7QUFBQSxNQUFBLEdBQUEsRUFBSyxPQUFMO0FBQUEsTUFDQSxXQUFBLEVBQWEsZ0JBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxRQUZaO0tBREYsQ0FBQSxDQUFBO1dBSUEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEIsTUFBNUIsRUFBb0MsRUFBcEMsRUFMUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBU0EsUUFBQSxHQUFXLFNBQUMsTUFBRCxFQUFTLE1BQVQsR0FBQTtBQUNULFFBQUEsS0FBQTtBQUFBLElBQUEsTUFBTSxDQUFDLElBQVAsR0FDRTtBQUFBLE1BQUEsTUFBQSxFQUFRO1FBQ047QUFBQSxVQUFFLEVBQUEsRUFBSSxJQUFOO0FBQUEsVUFBWSxJQUFBLEVBQU0sV0FBbEI7U0FETSxFQUVOO0FBQUEsVUFBRSxFQUFBLEVBQUksTUFBTjtBQUFBLFVBQWMsSUFBQSxFQUFNLE1BQXBCO1NBRk0sRUFHTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE1BQU47QUFBQSxVQUFjLElBQUEsRUFBTSxNQUFwQjtTQUhNLEVBSU47QUFBQSxVQUFFLEVBQUEsRUFBSSxRQUFOO0FBQUEsVUFBZ0IsSUFBQSxFQUFNLFFBQXRCO1NBSk0sRUFLTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE9BQU47QUFBQSxVQUFlLElBQUEsRUFBTSxPQUFyQjtTQUxNO09BQVI7S0FERixDQUFBO0FBQUEsSUFTQSxNQUFNLENBQUMsS0FBUCxHQUFlLFFBVGYsQ0FBQTtBQUFBLElBVUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsTUFBTSxDQUFDLElBQUssQ0FBQSxNQUFNLENBQUMsS0FBUCxDQVY3QixDQUFBO0FBQUEsSUFXQSxNQUFNLENBQUMsV0FBUCxHQUFxQixLQVhyQixDQUFBO0FBQUEsSUFhQSxNQUFNLENBQUMsU0FBUCxHQUFtQixTQUFBLEdBQUE7QUFDakIsTUFBQSxJQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXVCLHVCQUExQjtBQUNFLFFBQUEsTUFBTSxDQUFDLFdBQVAsR0FBcUIsS0FBckIsQ0FBQTtlQUNBLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWixFQUFzQixNQUFNLENBQUMsTUFBN0IsRUFGRjtPQURpQjtJQUFBLENBYm5CLENBQUE7QUFBQSxJQWtCQSxNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLEdBQUQsR0FBQTthQUNmLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLElBREQ7SUFBQSxDQWxCakIsQ0FBQTtBQUFBLElBcUJBLEtBQUEsR0FBUSxTQUFBLEdBQUE7QUFDTixNQUFBLE1BQU0sQ0FBQyxNQUFQLENBQWMsT0FBZCxDQUNFLENBQUMsRUFESCxDQUNNLE1BRE4sRUFDYyxTQUFBLEdBQUE7ZUFBRyxPQUFPLENBQUMsR0FBUixDQUFZLElBQUMsQ0FBQSxJQUFiLEVBQUg7TUFBQSxDQURkLENBQUEsQ0FBQTthQUVBLE1BQU0sQ0FBQyxNQUFQLENBQWMsUUFBZCxDQUNFLENBQUMsRUFESCxDQUNNLE1BRE4sRUFDYyxTQUFBLEdBQUE7ZUFBRyxNQUFNLENBQUMsSUFBUCxHQUFjLElBQUMsQ0FBQSxLQUFsQjtNQUFBLENBRGQsRUFITTtJQUFBLENBckJSLENBQUE7QUEyQkEsSUFBQSxJQUFZLE1BQU0sQ0FBQyxZQUFQLEtBQXVCLFdBQW5DO0FBQUEsTUFBQSxLQUFBLENBQUEsQ0FBQSxDQUFBO0tBM0JBO1dBNEJBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixLQUF0QixFQTdCUztFQUFBLENBVFgsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnZGF0YScsXG4gICAgdXJsOiAnL2RhdGEnXG4gICAgdGVtcGxhdGVVcmw6ICdkYXRhL2RhdGEuaHRtbCdcbiAgICBjb250cm9sbGVyOiBkYXRhQ3RybFxuICBuYXZiYXJQcm92aWRlci5hZGQgJy9kYXRhJywgJ0RhdGEnLCAzNVxuXG5kYXRhQ3RybCA9ICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgJHNjb3BlLmluZm8gPVxuICAgIGRyaXZlcjogW1xuICAgICAgeyBpZDogXCJpZFwiLCBuYW1lOiBcIlBhcmFtZXRlclwiIH1cbiAgICAgIHsgaWQ6IFwibmFtZVwiLCBuYW1lOiBcIk5hbWVcIiB9XG4gICAgICB7IGlkOiBcInVuaXRcIiwgbmFtZTogXCJVbml0XCIgfVxuICAgICAgeyBpZDogXCJmYWN0b3JcIiwgbmFtZTogXCJGYWN0b3JcIiB9XG4gICAgICB7IGlkOiBcInNjYWxlXCIsIG5hbWU6IFwiU2NhbGVcIiB9XG4gICAgXVxuICBcbiAgJHNjb3BlLnRhYmxlID0gJ2RyaXZlcicgIFxuICAkc2NvcGUuY29sdW1ucyA9ICRzY29wZS5pbmZvWyRzY29wZS50YWJsZV1cbiAgJHNjb3BlLmFsbG93RGVsZXRlID0gZmFsc2VcblxuICAkc2NvcGUuZGVsZXRlUm93ID0gLT5cbiAgICBpZiAkc2NvcGUuYWxsb3dEZWxldGUgYW5kICRzY29wZS5jdXJzb3I/XG4gICAgICAkc2NvcGUuYWxsb3dEZWxldGUgPSBmYWxzZVxuICAgICAgY29uc29sZS5sb2cgJ0RFTEVURScsICRzY29wZS5jdXJzb3JcblxuICAkc2NvcGUuZWRpdFJvdyA9IChyb3cpIC0+XG4gICAgJHNjb3BlLmN1cnNvciA9IHJvd1xuICAgIFxuICBzZXR1cCA9IC0+XG4gICAgamVlYnVzLmF0dGFjaCAndGFibGUnXG4gICAgICAub24gJ3N5bmMnLCAtPiBjb25zb2xlLmxvZyBAa2V5c1xuICAgIGplZWJ1cy5hdHRhY2ggJ2RyaXZlcidcbiAgICAgIC5vbiAnaW5pdCcsIC0+ICRzY29wZS5yb3dzID0gQHJvd3NcbiAgICAgIFxuICBzZXR1cCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCBzZXR1cFxuIl19
