(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('data', {
      url: '/data',
      templateUrl: 'data/data.html',
      controller: 'DataCtrl'
    });
    return navbarProvider.add('/data', 'Data', 35);
  });

  ng.controller('DataCtrl', function($scope, jeebus) {
    var attach;
    $scope.table = 'driver';
    $scope.info = {
      driver: [
        {
          id: "id",
          name: "Parameter"
        }, {
          id: "name",
          name: "Name"
        }, {
          id: "unit",
          name: "Unit"
        }, {
          id: "factor",
          name: "Factor"
        }, {
          id: "scale",
          name: "Scale"
        }
      ],
      sensor: [
        {
          id: "id",
          name: "Id"
        }, {
          id: "loc",
          name: "Location"
        }, {
          id: "ms",
          name: "Timestamp"
        }, {
          id: "typ",
          name: "Type"
        }
      ]
    };
    $scope.columns = $scope.info[$scope.table];
    $scope.editRow = function(row) {
      return $scope.cursor = row != null ? row : {};
    };
    attach = function() {
      var dataHandler, dataMap, dataVec;
      dataVec = $scope.rows = [];
      dataMap = {};
      dataHandler = function(tag, msg) {
        var _name;
        msg.id = tag;
        if (dataMap[_name = msg.id] == null) {
          dataMap[_name] = dataVec.length;
        }
        return dataVec[dataMap[msg.id]] = msg;
      };
      return jeebus.gadget('Attach', {
        In: "/" + $scope.table + "/"
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return dataHandler(m.Tag.slice(2 + $scope.table.length), m.Msg);
        }
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEVBQWlCLGNBQWpCLEdBQUE7QUFDUixJQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQ0U7QUFBQSxNQUFBLEdBQUEsRUFBSyxPQUFMO0FBQUEsTUFDQSxXQUFBLEVBQWEsZ0JBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxVQUZaO0tBREYsQ0FBQSxDQUFBO1dBSUEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEIsTUFBNUIsRUFBb0MsRUFBcEMsRUFMUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBU0EsRUFBRSxDQUFDLFVBQUgsQ0FBYyxVQUFkLEVBQTBCLFNBQUMsTUFBRCxFQUFTLE1BQVQsR0FBQTtBQUN4QixRQUFBLE1BQUE7QUFBQSxJQUFBLE1BQU0sQ0FBQyxLQUFQLEdBQWUsUUFBZixDQUFBO0FBQUEsSUFHQSxNQUFNLENBQUMsSUFBUCxHQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVE7UUFDTjtBQUFBLFVBQUUsRUFBQSxFQUFJLElBQU47QUFBQSxVQUFZLElBQUEsRUFBTSxXQUFsQjtTQURNLEVBRU47QUFBQSxVQUFFLEVBQUEsRUFBSSxNQUFOO0FBQUEsVUFBYyxJQUFBLEVBQU0sTUFBcEI7U0FGTSxFQUdOO0FBQUEsVUFBRSxFQUFBLEVBQUksTUFBTjtBQUFBLFVBQWMsSUFBQSxFQUFNLE1BQXBCO1NBSE0sRUFJTjtBQUFBLFVBQUUsRUFBQSxFQUFJLFFBQU47QUFBQSxVQUFnQixJQUFBLEVBQU0sUUFBdEI7U0FKTSxFQUtOO0FBQUEsVUFBRSxFQUFBLEVBQUksT0FBTjtBQUFBLFVBQWUsSUFBQSxFQUFNLE9BQXJCO1NBTE07T0FBUjtBQUFBLE1BT0EsTUFBQSxFQUFRO1FBQ047QUFBQSxVQUFFLEVBQUEsRUFBSSxJQUFOO0FBQUEsVUFBWSxJQUFBLEVBQU0sSUFBbEI7U0FETSxFQUVOO0FBQUEsVUFBRSxFQUFBLEVBQUksS0FBTjtBQUFBLFVBQWEsSUFBQSxFQUFNLFVBQW5CO1NBRk0sRUFJTjtBQUFBLFVBQUUsRUFBQSxFQUFJLElBQU47QUFBQSxVQUFZLElBQUEsRUFBTSxXQUFsQjtTQUpNLEVBS047QUFBQSxVQUFFLEVBQUEsRUFBSSxLQUFOO0FBQUEsVUFBYSxJQUFBLEVBQU0sTUFBbkI7U0FMTTtPQVBSO0tBSkYsQ0FBQTtBQUFBLElBbUJBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLE1BQU0sQ0FBQyxJQUFLLENBQUEsTUFBTSxDQUFDLEtBQVAsQ0FuQjdCLENBQUE7QUFBQSxJQXFCQSxNQUFNLENBQUMsT0FBUCxHQUFpQixTQUFDLEdBQUQsR0FBQTthQUNmLE1BQU0sQ0FBQyxNQUFQLGlCQUFnQixNQUFNLEdBRFA7SUFBQSxDQXJCakIsQ0FBQTtBQUFBLElBd0JBLE1BQUEsR0FBUyxTQUFBLEdBQUE7QUFDUCxVQUFBLDZCQUFBO0FBQUEsTUFBQSxPQUFBLEdBQVUsTUFBTSxDQUFDLElBQVAsR0FBYyxFQUF4QixDQUFBO0FBQUEsTUFDQSxPQUFBLEdBQVUsRUFEVixDQUFBO0FBQUEsTUFHQSxXQUFBLEdBQWMsU0FBQyxHQUFELEVBQU0sR0FBTixHQUFBO0FBQ1osWUFBQSxLQUFBO0FBQUEsUUFBQSxHQUFHLENBQUMsRUFBSixHQUFTLEdBQVQsQ0FBQTs7VUFDQSxpQkFBbUIsT0FBTyxDQUFDO1NBRDNCO2VBRUEsT0FBUSxDQUFBLE9BQVEsQ0FBQSxHQUFHLENBQUMsRUFBSixDQUFSLENBQVIsR0FBMkIsSUFIZjtNQUFBLENBSGQsQ0FBQTthQVFBLE1BQU0sQ0FBQyxNQUFQLENBQWMsUUFBZCxFQUF3QjtBQUFBLFFBQUEsRUFBQSxFQUFLLEdBQUEsR0FBRSxNQUFNLENBQUMsS0FBVCxHQUFnQixHQUFyQjtPQUF4QixDQUNFLENBQUMsRUFESCxDQUNNLEtBRE4sRUFDYSxTQUFDLENBQUQsR0FBQTtBQUNULFFBQUEsSUFBRyxDQUFDLENBQUMsR0FBSSxDQUFBLENBQUEsQ0FBTixLQUFjLEdBQWpCO2lCQUNFLFdBQUEsQ0FBWSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQU4sQ0FBWSxDQUFBLEdBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUE3QixDQUFaLEVBQWtELENBQUMsQ0FBQyxHQUFwRCxFQURGO1NBRFM7TUFBQSxDQURiLEVBVE87SUFBQSxDQXhCVCxDQUFBO0FBc0NBLElBQUEsSUFBYSxNQUFNLENBQUMsWUFBUCxLQUF1QixXQUFwQztBQUFBLE1BQUEsTUFBQSxDQUFBLENBQUEsQ0FBQTtLQXRDQTtXQXVDQSxNQUFNLENBQUMsR0FBUCxDQUFXLFNBQVgsRUFBc0IsU0FBQSxHQUFBO2FBQUcsTUFBQSxDQUFBLEVBQUg7SUFBQSxDQUF0QixFQXhDd0I7RUFBQSxDQUExQixDQVRBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ2RhdGEnLFxuICAgIHVybDogJy9kYXRhJ1xuICAgIHRlbXBsYXRlVXJsOiAnZGF0YS9kYXRhLmh0bWwnXG4gICAgY29udHJvbGxlcjogJ0RhdGFDdHJsJ1xuICBuYXZiYXJQcm92aWRlci5hZGQgJy9kYXRhJywgJ0RhdGEnLCAzNVxuXG5uZy5jb250cm9sbGVyICdEYXRhQ3RybCcsICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgJHNjb3BlLnRhYmxlID0gJ2RyaXZlcidcbiAgIyAkc2NvcGUudGFibGUgPSAnc2Vuc29yJ1xuICBcbiAgJHNjb3BlLmluZm8gPVxuICAgIGRyaXZlcjogW1xuICAgICAgeyBpZDogXCJpZFwiLCBuYW1lOiBcIlBhcmFtZXRlclwiIH1cbiAgICAgIHsgaWQ6IFwibmFtZVwiLCBuYW1lOiBcIk5hbWVcIiB9XG4gICAgICB7IGlkOiBcInVuaXRcIiwgbmFtZTogXCJVbml0XCIgfVxuICAgICAgeyBpZDogXCJmYWN0b3JcIiwgbmFtZTogXCJGYWN0b3JcIiB9XG4gICAgICB7IGlkOiBcInNjYWxlXCIsIG5hbWU6IFwiU2NhbGVcIiB9XG4gICAgXVxuICAgIHNlbnNvcjogW1xuICAgICAgeyBpZDogXCJpZFwiLCBuYW1lOiBcIklkXCIgfVxuICAgICAgeyBpZDogXCJsb2NcIiwgbmFtZTogXCJMb2NhdGlvblwiIH1cbiAgICAgICMgeyBpZDogXCJ2YWxcIiwgbmFtZTogXCJWYWx1ZXNcIiB9XG4gICAgICB7IGlkOiBcIm1zXCIsIG5hbWU6IFwiVGltZXN0YW1wXCIgfVxuICAgICAgeyBpZDogXCJ0eXBcIiwgbmFtZTogXCJUeXBlXCIgfVxuICAgIF1cbiAgXG4gICRzY29wZS5jb2x1bW5zID0gJHNjb3BlLmluZm9bJHNjb3BlLnRhYmxlXVxuXG4gICRzY29wZS5lZGl0Um93ID0gKHJvdykgLT5cbiAgICAkc2NvcGUuY3Vyc29yID0gcm93ID8ge31cbiAgICBcbiAgYXR0YWNoID0gLT5cbiAgICBkYXRhVmVjID0gJHNjb3BlLnJvd3MgPSBbXVxuICAgIGRhdGFNYXAgPSB7fVxuXG4gICAgZGF0YUhhbmRsZXIgPSAodGFnLCBtc2cpIC0+XG4gICAgICBtc2cuaWQgPSB0YWdcbiAgICAgIGRhdGFNYXBbbXNnLmlkXSA/PSBkYXRhVmVjLmxlbmd0aFxuICAgICAgZGF0YVZlY1tkYXRhTWFwW21zZy5pZF1dID0gbXNnXG4gIFxuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiBcIi8jeyRzY29wZS50YWJsZX0vXCJcbiAgICAgIC5vbiAnT3V0JywgKG0pIC0+XG4gICAgICAgIGlmIG0uVGFnWzBdIGlzbnQgJzwnXG4gICAgICAgICAgZGF0YUhhbmRsZXIgbS5UYWcuc2xpY2UoMiArICRzY29wZS50YWJsZS5sZW5ndGgpLCBtLk1zZ1xuXG4gIGF0dGFjaCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCAtPiBhdHRhY2goKVxuIl19
