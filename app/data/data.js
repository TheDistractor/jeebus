(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('data', {
      url: '/data',
      templateUrl: 'data/data.html',
      controller: 'DataCtrl'
    });
    return navbarProvider.add('/data', 'Data', 35);
  });

  ng.controller('DataCtrl', function($scope, jeebus) {
    var attach, dataHandler, dataMap, dataVec;
    $scope.table = 'driver';
    $scope.info = {
      driver: [
        {
          id: "id",
          name: "Parameter"
        }, {
          id: "name",
          name: "Name"
        }, {
          id: "unit",
          name: "Unit"
        }, {
          id: "factor",
          name: "Factor"
        }, {
          id: "scale",
          name: "Scale"
        }
      ],
      sensor: [
        {
          id: "id",
          name: "Id"
        }, {
          id: "loc",
          name: "Location"
        }, {
          id: "val",
          name: "Values"
        }, {
          id: "ms",
          name: "Timestamp"
        }, {
          id: "typ",
          name: "Type"
        }
      ]
    };
    $scope.columns = $scope.info[$scope.table];
    dataHandler = function(tag, msg) {
      var _name;
      msg.id = tag;
      if (dataMap[_name = msg.id] == null) {
        dataMap[_name] = dataVec.length;
      }
      return dataVec[dataMap[msg.id]] = msg;
    };
    $scope.editRow = function(row) {
      return $scope.cursor = row != null ? row : {};
    };
    dataVec = $scope.rows = [];
    dataMap = {};
    attach = function() {
      return jeebus.gadget('Attach', {
        In: "/" + $scope.table + "/"
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return dataHandler(m.Tag.slice(2 + $scope.table.length), m.Msg);
        }
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0YS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLEVBQUE7O0FBQUEsRUFBQSxFQUFBLEdBQUssT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFmLENBQUwsQ0FBQTs7QUFBQSxFQUVBLEVBQUUsQ0FBQyxNQUFILENBQVUsU0FBQyxjQUFELEVBQWlCLGNBQWpCLEdBQUE7QUFDUixJQUFBLGNBQWMsQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQ0U7QUFBQSxNQUFBLEdBQUEsRUFBSyxPQUFMO0FBQUEsTUFDQSxXQUFBLEVBQWEsZ0JBRGI7QUFBQSxNQUVBLFVBQUEsRUFBWSxVQUZaO0tBREYsQ0FBQSxDQUFBO1dBSUEsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsT0FBbkIsRUFBNEIsTUFBNUIsRUFBb0MsRUFBcEMsRUFMUTtFQUFBLENBQVYsQ0FGQSxDQUFBOztBQUFBLEVBU0EsRUFBRSxDQUFDLFVBQUgsQ0FBYyxVQUFkLEVBQTBCLFNBQUMsTUFBRCxFQUFTLE1BQVQsR0FBQTtBQUN4QixRQUFBLHFDQUFBO0FBQUEsSUFBQSxNQUFNLENBQUMsS0FBUCxHQUFlLFFBQWYsQ0FBQTtBQUFBLElBR0EsTUFBTSxDQUFDLElBQVAsR0FDRTtBQUFBLE1BQUEsTUFBQSxFQUFRO1FBQ047QUFBQSxVQUFFLEVBQUEsRUFBSSxJQUFOO0FBQUEsVUFBWSxJQUFBLEVBQU0sV0FBbEI7U0FETSxFQUVOO0FBQUEsVUFBRSxFQUFBLEVBQUksTUFBTjtBQUFBLFVBQWMsSUFBQSxFQUFNLE1BQXBCO1NBRk0sRUFHTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE1BQU47QUFBQSxVQUFjLElBQUEsRUFBTSxNQUFwQjtTQUhNLEVBSU47QUFBQSxVQUFFLEVBQUEsRUFBSSxRQUFOO0FBQUEsVUFBZ0IsSUFBQSxFQUFNLFFBQXRCO1NBSk0sRUFLTjtBQUFBLFVBQUUsRUFBQSxFQUFJLE9BQU47QUFBQSxVQUFlLElBQUEsRUFBTSxPQUFyQjtTQUxNO09BQVI7QUFBQSxNQU9BLE1BQUEsRUFBUTtRQUNOO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksSUFBQSxFQUFNLElBQWxCO1NBRE0sRUFFTjtBQUFBLFVBQUUsRUFBQSxFQUFJLEtBQU47QUFBQSxVQUFhLElBQUEsRUFBTSxVQUFuQjtTQUZNLEVBR047QUFBQSxVQUFFLEVBQUEsRUFBSSxLQUFOO0FBQUEsVUFBYSxJQUFBLEVBQU0sUUFBbkI7U0FITSxFQUlOO0FBQUEsVUFBRSxFQUFBLEVBQUksSUFBTjtBQUFBLFVBQVksSUFBQSxFQUFNLFdBQWxCO1NBSk0sRUFLTjtBQUFBLFVBQUUsRUFBQSxFQUFJLEtBQU47QUFBQSxVQUFhLElBQUEsRUFBTSxNQUFuQjtTQUxNO09BUFI7S0FKRixDQUFBO0FBQUEsSUFtQkEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsTUFBTSxDQUFDLElBQUssQ0FBQSxNQUFNLENBQUMsS0FBUCxDQW5CN0IsQ0FBQTtBQUFBLElBcUJBLFdBQUEsR0FBYyxTQUFDLEdBQUQsRUFBTSxHQUFOLEdBQUE7QUFDWixVQUFBLEtBQUE7QUFBQSxNQUFBLEdBQUcsQ0FBQyxFQUFKLEdBQVMsR0FBVCxDQUFBOztRQUNBLGlCQUFtQixPQUFPLENBQUM7T0FEM0I7YUFFQSxPQUFRLENBQUEsT0FBUSxDQUFBLEdBQUcsQ0FBQyxFQUFKLENBQVIsQ0FBUixHQUEyQixJQUhmO0lBQUEsQ0FyQmQsQ0FBQTtBQUFBLElBMEJBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLFNBQUMsR0FBRCxHQUFBO2FBQ2YsTUFBTSxDQUFDLE1BQVAsaUJBQWdCLE1BQU0sR0FEUDtJQUFBLENBMUJqQixDQUFBO0FBQUEsSUE2QkEsT0FBQSxHQUFVLE1BQU0sQ0FBQyxJQUFQLEdBQWMsRUE3QnhCLENBQUE7QUFBQSxJQThCQSxPQUFBLEdBQVUsRUE5QlYsQ0FBQTtBQUFBLElBZ0NBLE1BQUEsR0FBUyxTQUFBLEdBQUE7YUFDUCxNQUFNLENBQUMsTUFBUCxDQUFjLFFBQWQsRUFBd0I7QUFBQSxRQUFBLEVBQUEsRUFBSyxHQUFBLEdBQUUsTUFBTSxDQUFDLEtBQVQsR0FBZ0IsR0FBckI7T0FBeEIsQ0FDRSxDQUFDLEVBREgsQ0FDTSxLQUROLEVBQ2EsU0FBQyxDQUFELEdBQUE7QUFDVCxRQUFBLElBQUcsQ0FBQyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQU4sS0FBYyxHQUFqQjtpQkFDRSxXQUFBLENBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFOLENBQVksQ0FBQSxHQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBN0IsQ0FBWixFQUFrRCxDQUFDLENBQUMsR0FBcEQsRUFERjtTQURTO01BQUEsQ0FEYixFQURPO0lBQUEsQ0FoQ1QsQ0FBQTtBQXNDQSxJQUFBLElBQWEsTUFBTSxDQUFDLFlBQVAsS0FBdUIsV0FBcEM7QUFBQSxNQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUE7S0F0Q0E7V0F1Q0EsTUFBTSxDQUFDLEdBQVAsQ0FBVyxTQUFYLEVBQXNCLFNBQUEsR0FBQTthQUFHLE1BQUEsQ0FBQSxFQUFIO0lBQUEsQ0FBdEIsRUF4Q3dCO0VBQUEsQ0FBMUIsQ0FUQSxDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxubmcuY29uZmlnICgkc3RhdGVQcm92aWRlciwgbmF2YmFyUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlICdkYXRhJyxcbiAgICB1cmw6ICcvZGF0YSdcbiAgICB0ZW1wbGF0ZVVybDogJ2RhdGEvZGF0YS5odG1sJ1xuICAgIGNvbnRyb2xsZXI6ICdEYXRhQ3RybCdcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvZGF0YScsICdEYXRhJywgMzVcblxubmcuY29udHJvbGxlciAnRGF0YUN0cmwnLCAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICRzY29wZS50YWJsZSA9ICdkcml2ZXInXG4gICMgJHNjb3BlLnRhYmxlID0gJ3NlbnNvcidcbiAgXG4gICRzY29wZS5pbmZvID1cbiAgICBkcml2ZXI6IFtcbiAgICAgIHsgaWQ6IFwiaWRcIiwgbmFtZTogXCJQYXJhbWV0ZXJcIiB9XG4gICAgICB7IGlkOiBcIm5hbWVcIiwgbmFtZTogXCJOYW1lXCIgfVxuICAgICAgeyBpZDogXCJ1bml0XCIsIG5hbWU6IFwiVW5pdFwiIH1cbiAgICAgIHsgaWQ6IFwiZmFjdG9yXCIsIG5hbWU6IFwiRmFjdG9yXCIgfVxuICAgICAgeyBpZDogXCJzY2FsZVwiLCBuYW1lOiBcIlNjYWxlXCIgfVxuICAgIF1cbiAgICBzZW5zb3I6IFtcbiAgICAgIHsgaWQ6IFwiaWRcIiwgbmFtZTogXCJJZFwiIH1cbiAgICAgIHsgaWQ6IFwibG9jXCIsIG5hbWU6IFwiTG9jYXRpb25cIiB9XG4gICAgICB7IGlkOiBcInZhbFwiLCBuYW1lOiBcIlZhbHVlc1wiIH1cbiAgICAgIHsgaWQ6IFwibXNcIiwgbmFtZTogXCJUaW1lc3RhbXBcIiB9XG4gICAgICB7IGlkOiBcInR5cFwiLCBuYW1lOiBcIlR5cGVcIiB9XG4gICAgXVxuICBcbiAgJHNjb3BlLmNvbHVtbnMgPSAkc2NvcGUuaW5mb1skc2NvcGUudGFibGVdXG5cbiAgZGF0YUhhbmRsZXIgPSAodGFnLCBtc2cpIC0+XG4gICAgbXNnLmlkID0gdGFnXG4gICAgZGF0YU1hcFttc2cuaWRdID89IGRhdGFWZWMubGVuZ3RoXG4gICAgZGF0YVZlY1tkYXRhTWFwW21zZy5pZF1dID0gbXNnXG4gIFxuICAkc2NvcGUuZWRpdFJvdyA9IChyb3cpIC0+XG4gICAgJHNjb3BlLmN1cnNvciA9IHJvdyA/IHt9XG4gICAgXG4gIGRhdGFWZWMgPSAkc2NvcGUucm93cyA9IFtdXG4gIGRhdGFNYXAgPSB7fVxuXG4gIGF0dGFjaCA9IC0+XG4gICAgamVlYnVzLmdhZGdldCAnQXR0YWNoJywgSW46IFwiLyN7JHNjb3BlLnRhYmxlfS9cIlxuICAgICAgLm9uICdPdXQnLCAobSkgLT5cbiAgICAgICAgaWYgbS5UYWdbMF0gaXNudCAnPCdcbiAgICAgICAgICBkYXRhSGFuZGxlciBtLlRhZy5zbGljZSgyICsgJHNjb3BlLnRhYmxlLmxlbmd0aCksIG0uTXNnXG5cbiAgYXR0YWNoKCkgIGlmICRzY29wZS5zZXJ2ZXJTdGF0dXMgaXMgJ2Nvbm5lY3RlZCdcbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIC0+IGF0dGFjaCgpXG4iXX0=
