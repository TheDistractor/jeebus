(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, $filter, jeebus) {
    var readingsMap;
    $scope.readings = [];
    readingsMap = {};
    return $scope.$on('ws-open', function() {
      return jeebus.gadget('MQTTSub', {
        Topic: '/sensor/#',
        Port: ':1883'
      }).on('Out', function(msg) {
        var Tag, i, id, key, loc, ms, row, typ, val, value, _ref, _results;
        Tag = msg.Tag, (_ref = msg.Msg, loc = _ref.loc, ms = _ref.ms, val = _ref.val, typ = _ref.typ);
        _results = [];
        for (key in val) {
          value = val[key];
          id = "" + (Tag.slice(8)) + " - " + key;
          i = readingsMap[id];
          if (i == null) {
            i = readingsMap[id] = $scope.readings.length;
            $scope.readings.push({
              loc: loc,
              key: key,
              value: "",
              date: "",
              typ: typ,
              id: id
            });
          }
          row = $scope.readings[i];
          row.value = value;
          _results.push(row.time = $filter('date')(ms, "MM-dd HH:mm:ss"));
        }
        return _results;
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQixNQUFsQixHQUFBO0FBQzFCLFFBQUEsV0FBQTtBQUFBLElBQUEsTUFBTSxDQUFDLFFBQVAsR0FBa0IsRUFBbEIsQ0FBQTtBQUFBLElBQ0EsV0FBQSxHQUFjLEVBRGQsQ0FBQTtXQU1BLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixTQUFBLEdBQUE7YUFFcEIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFkLEVBQXlCO0FBQUEsUUFBQSxLQUFBLEVBQU8sV0FBUDtBQUFBLFFBQW9CLElBQUEsRUFBTSxPQUExQjtPQUF6QixDQUNFLENBQUMsRUFESCxDQUNNLEtBRE4sRUFDYSxTQUFDLEdBQUQsR0FBQTtBQUNULFlBQUEsOERBQUE7QUFBQSxRQUFDLFVBQUEsR0FBRCxjQUFLLEtBQUssV0FBQSxLQUFJLFVBQUEsSUFBRyxXQUFBLEtBQUksV0FBQSxJQUFyQixDQUFBO0FBQ0E7YUFBQSxVQUFBOzJCQUFBO0FBQ0UsVUFBQSxFQUFBLEdBQUssRUFBQSxHQUFFLENBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsQ0FBRixHQUFnQixLQUFoQixHQUFvQixHQUF6QixDQUFBO0FBQUEsVUFDQSxDQUFBLEdBQUksV0FBWSxDQUFBLEVBQUEsQ0FEaEIsQ0FBQTtBQUVBLFVBQUEsSUFBTyxTQUFQO0FBQ0UsWUFBQSxDQUFBLEdBQUksV0FBWSxDQUFBLEVBQUEsQ0FBWixHQUFrQixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXRDLENBQUE7QUFBQSxZQUNBLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBaEIsQ0FDRTtBQUFBLGNBQUEsR0FBQSxFQUFLLEdBQUw7QUFBQSxjQUFVLEdBQUEsRUFBSyxHQUFmO0FBQUEsY0FBb0IsS0FBQSxFQUFPLEVBQTNCO0FBQUEsY0FBK0IsSUFBQSxFQUFNLEVBQXJDO0FBQUEsY0FBeUMsR0FBQSxFQUFLLEdBQTlDO0FBQUEsY0FBbUQsRUFBQSxFQUFJLEVBQXZEO2FBREYsQ0FEQSxDQURGO1dBRkE7QUFBQSxVQU1BLEdBQUEsR0FBTSxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FOdEIsQ0FBQTtBQUFBLFVBT0EsR0FBRyxDQUFDLEtBQUosR0FBWSxLQVBaLENBQUE7QUFBQSx3QkFTQSxHQUFHLENBQUMsSUFBSixHQUFXLE9BQUEsQ0FBUSxNQUFSLENBQUEsQ0FBZ0IsRUFBaEIsRUFBb0IsZ0JBQXBCLEVBVFgsQ0FERjtBQUFBO3dCQUZTO01BQUEsQ0FEYixFQUZvQjtJQUFBLENBQXRCLEVBUDBCO0VBQUEsQ0FBNUIsQ0FUQSxDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxubmcuY29uZmlnICgkc3RhdGVQcm92aWRlciwgbmF2YmFyUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlICdzdGF0dXMnLFxuICAgIHVybDogJy9zdGF0dXMnXG4gICAgdGVtcGxhdGVVcmw6ICdzdGF0dXMvc3RhdHVzLmh0bWwnXG4gICAgY29udHJvbGxlcjogJ1N0YXR1c0N0cmwnXG4gIG5hdmJhclByb3ZpZGVyLmFkZCAnL3N0YXR1cycsICdTdGF0dXMnLCAzMFxuXG5uZy5jb250cm9sbGVyICdTdGF0dXNDdHJsJywgKCRzY29wZSwgJGZpbHRlciwgamVlYnVzKSAtPlxuICAkc2NvcGUucmVhZGluZ3MgPSBbXVxuICByZWFkaW5nc01hcCA9IHt9XG5cbiAgIyAkc2NvcGUuaHdpZCA9IGplZWJ1cy5hdHRhY2ggJy9qZWVib290L2h3aWQvJ1xuICAjICRzY29wZS4kb24gJyRkZXN0cm95JywgLT4gamVlYnVzLmRldGFjaCAnL2plZWJvb3QvaHdpZC8nXG5cbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIC0+XG4gICAgXG4gICAgamVlYnVzLmdhZGdldCAnTVFUVFN1YicsIFRvcGljOiAnL3NlbnNvci8jJywgUG9ydDogJzoxODgzJ1xuICAgICAgLm9uICdPdXQnLCAobXNnKSAtPlxuICAgICAgICB7VGFnLE1zZzp7bG9jLG1zLHZhbCx0eXB9fSA9IG1zZ1xuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiB2YWxcbiAgICAgICAgICBpZCA9IFwiI3tUYWcuc2xpY2UoOCl9IC0gI3trZXl9XCJcbiAgICAgICAgICBpID0gcmVhZGluZ3NNYXBbaWRdXG4gICAgICAgICAgdW5sZXNzIGk/XG4gICAgICAgICAgICBpID0gcmVhZGluZ3NNYXBbaWRdID0gJHNjb3BlLnJlYWRpbmdzLmxlbmd0aFxuICAgICAgICAgICAgJHNjb3BlLnJlYWRpbmdzLnB1c2hcbiAgICAgICAgICAgICAgbG9jOiBsb2MsIGtleToga2V5LCB2YWx1ZTogXCJcIiwgZGF0ZTogXCJcIiwgdHlwOiB0eXAsIGlkOiBpZFxuICAgICAgICAgIHJvdyA9ICRzY29wZS5yZWFkaW5nc1tpXVxuICAgICAgICAgIHJvdy52YWx1ZSA9IHZhbHVlXG4gICAgICAgICAgIyBjb252ZXJ0aW5nIHRvIGEgc3RyaW5nIGhlcmUgYXBwZWFycyB0byBiZSBtb3JlIGVmZmljaWVudC4uLlxuICAgICAgICAgIHJvdy50aW1lID0gJGZpbHRlcignZGF0ZScpKG1zLCBcIk1NLWRkIEhIOm1tOnNzXCIpXG4iXX0=
