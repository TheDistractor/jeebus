(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var adjust, attach, readingMap, readingVec, unitMap, unitVec;
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('Attach', {
        In: '/sensor/'
      }).on('Out', function(message) {
        var did, key, loc, ms, msg, raw, tag, tid, typ, val, _results;
        tag = message.Tag, msg = message.Msg;
        if (tag[0] !== '<') {
          loc = msg.loc, ms = msg.ms, val = msg.val, typ = msg.typ;
          _results = [];
          for (key in val) {
            raw = val[key];
            did = "" + (tag.slice(8)) + " - " + key;
            tid = "" + typ + "/" + key;
            if (readingMap[did] == null) {
              readingMap[did] = readingVec.length;
            }
            _results.push(readingVec[readingMap[did]] = adjust({
              loc: loc,
              key: key,
              raw: raw,
              ms: ms,
              typ: typ,
              did: did,
              tid: tid
            }));
          }
          return _results;
        }
      });
      return jeebus.gadget('Attach', {
        In: '/driver/'
      }).on('Out', function(message) {
        var msg, tag, tid;
        tag = message.Tag, msg = message.Msg;
        if (tag[0] !== '<') {
          tid = tag.slice(8);
          if (unitMap[tid] == null) {
            unitMap[tid] = unitVec.length;
          }
          return unitVec[unitMap[tid]] = msg;
        }
      });
    };
    adjust = function(row) {
      var info;
      info = unitVec[unitMap[row.tid]];
      row.value = row.raw;
      if (info != null) {
        row.key = info.name;
        row.unit = info.unit;
        if (info.factor) {
          row.value *= info.factor;
        }
        if (info.scale < 0) {
          row.value *= Math.pow(10, -info.scale);
        } else if (info.scale >= 0) {
          row.value /= Math.pow(10, info.scale);
          row.value = row.value.toFixed(info.scale);
        }
      }
      return row;
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQzFCLFFBQUEsd0RBQUE7QUFBQSxJQUFBLFVBQUEsR0FBYSxNQUFNLENBQUMsUUFBUCxHQUFrQixFQUEvQixDQUFBO0FBQUEsSUFDQSxVQUFBLEdBQWEsRUFEYixDQUFBO0FBQUEsSUFFQSxPQUFBLEdBQVUsTUFBTSxDQUFDLEtBQVAsR0FBZSxFQUZ6QixDQUFBO0FBQUEsSUFHQSxPQUFBLEdBQVUsRUFIVixDQUFBO0FBQUEsSUFLQSxNQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsTUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjLFFBQWQsRUFBd0I7QUFBQSxRQUFBLEVBQUEsRUFBSSxVQUFKO09BQXhCLENBQ0UsQ0FBQyxFQURILENBQ00sS0FETixFQUNhLFNBQUMsT0FBRCxHQUFBO0FBRVQsWUFBQSx5REFBQTtBQUFBLFFBQUssY0FBSixHQUFELEVBQWEsY0FBSixHQUFULENBQUE7QUFDQSxRQUFBLElB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LENBQUEsQ0FBQSxDQUFBO0tBM0NBO1dBNENBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixTQUFBLEdBQUE7YUFBRyxNQUFBLENBQUEsRUFBSDtJQUFBLENBQXRCLEVBN0MwQjtFQUFBLENBQTVCLENBVEEsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnc3RhdHVzJyxcbiAgICB1cmw6ICcvc3RhdHVzJ1xuICAgIHRlbXBsYXRlVXJsOiAnc3RhdHVzL3N0YXR1cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6ICdTdGF0dXNDdHJsJ1xuICBuYXZiYXJQcm92aWRlci5hZGQgJy9zdGF0dXMnLCAnU3RhdHVzJywgMzBcblxubmcuY29udHJvbGxlciAnU3RhdHVzQ3RybCcsICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgcmVhZGluZ1ZlYyA9ICRzY29wZS5yZWFkaW5ncyA9IFtdXG4gIHJlYWRpbmdNYXAgPSB7fVxuICB1bml0VmVjID0gJHNjb3BlLnVuaXRzID0gW11cbiAgdW5pdE1hcCA9IHt9XG5cbiAgYXR0YWNoID0gLT5cbiAgICBqZWVidXMuZ2FkZ2V0ICdBdHRhY2gnLCBJbjogJy9zZW5zb3IvJ1xuICAgICAgLm9uICdPdXQnLCAobWVzc2FnZSkgLT5cbiAgICAgICAgIyBsb2M6IC4uLiB2YWw6IFtjMToxMixjMjozNCwuLi5dXG4gICAgICAgIHtUYWc6dGFnLE1zZzptc2d9ID0gbWVzc2FnZVxuICAgICAgICBpZiB0YWdbMF0gaXNudCAnPCdcbiAgICAgICAgICB7bG9jLG1zLHZhbCx0eXB9ID0gbXNnXG4gICAgICAgICAgZm9yIGtleSwgcmF3IG9mIHZhbFxuICAgICAgICAgICAgZGlkID0gXCIje3RhZy5zbGljZSg4KX0gLSAje2tleX1cIiAjIGRldmljZSBpZFxuICAgICAgICAgICAgdGlkID0gXCIje3R5cH0vI3trZXl9XCIgICAgICAgICAgICAjIHR5cGUgaWRcbiAgICAgICAgICAgIHJlYWRpbmdNYXBbZGlkXSA/PSByZWFkaW5nVmVjLmxlbmd0aFxuICAgICAgICAgICAgcmVhZGluZ1ZlY1tyZWFkaW5nTWFwW2RpZF1dID0gYWRqdXN0IHtsb2Msa2V5LHJhdyxtcyx0eXAsZGlkLHRpZH1cbiAgICAgICAgICBcbiAgICBqZWVidXMuZ2FkZ2V0ICdBdHRhY2gnLCBJbjogJy9kcml2ZXIvJ1xuICAgICAgLm9uICdPdXQnLCAobWVzc2FnZSkgLT5cbiAgICAgICAgIyBuYW1lOiB1bml0OiBzY2FsZTogLi4uXG4gICAgICAgIHtUYWc6dGFnLE1zZzptc2d9ID0gbWVzc2FnZVxuICAgICAgICBpZiB0YWdbMF0gaXNudCAnPCdcbiAgICAgICAgICB0aWQgPSB0YWcuc2xpY2UoOClcbiAgICAgICAgICB1bml0TWFwW3RpZF0gPz0gdW5pdFZlYy5sZW5ndGhcbiAgICAgICAgICB1bml0VmVjW3VuaXRNYXBbdGlkXV0gPSBtc2dcblxuICBhZGp1c3QgPSAocm93KSAtPlxuICAgIGluZm8gPSB1bml0VmVjW3VuaXRNYXBbcm93LnRpZF1dXG4gICAgcm93LnZhbHVlID0gcm93LnJhd1xuICAgIGlmIGluZm8/XG4gICAgICByb3cua2V5ID0gaW5mby5uYW1lXG4gICAgICByb3cudW5pdCA9IGluZm8udW5pdFxuICAgICAgIyBhcHBseSBzb21lIHNjYWxpbmcgYW5kIGZvcm1hdHRpbmdcbiAgICAgIGlmIGluZm8uZmFjdG9yXG4gICAgICAgIHJvdy52YWx1ZSAqPSBpbmZvLmZhY3RvclxuICAgICAgaWYgaW5mby5zY2FsZSA8IDBcbiAgICAgICAgcm93LnZhbHVlICo9IE1hdGgucG93IDEwLCAtaW5mby5zY2FsZVxuICAgICAgZWxzZSBpZiBpbmZvLnNjYWxlID49IDBcbiAgICAgICAgcm93LnZhbHVlIC89IE1hdGgucG93IDEwLCBpbmZvLnNjYWxlXG4gICAgICAgIHJvdy52YWx1ZSA9IHJvdy52YWx1ZS50b0ZpeGVkIGluZm8uc2NhbGVcbiAgICByb3dcblxuICBhdHRhY2goKSAgaWYgJHNjb3BlLnNlcnZlclN0YXR1cyBpcyAnY29ubmVjdGVkJ1xuICAkc2NvcGUuJG9uICd3cy1vcGVuJywgLT4gYXR0YWNoKClcbiJdfQ==
