(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var adjust, attach, lookupMaps, readingHandler, readingMap, readingVec, unitHandler, unitMap, unitVec;
    readingHandler = function(tag, msg) {
      var id, key, loc, ms, raw, tid, typ, val, _results;
      loc = msg.loc, ms = msg.ms, val = msg.val, typ = msg.typ;
      _results = [];
      for (key in val) {
        raw = val[key];
        id = "" + tag + " - " + key;
        tid = "" + typ + "/" + key;
        if (readingMap[id] == null) {
          readingMap[id] = readingVec.length;
        }
        _results.push(readingVec[readingMap[id]] = adjust({
          loc: loc,
          key: key,
          raw: raw,
          ms: ms,
          typ: typ,
          id: id,
          tid: tid
        }));
      }
      return _results;
    };
    unitHandler = function(tag, msg) {
      var r, _i, _len, _name, _results;
      msg.id = tag;
      if (unitMap[_name = msg.id] == null) {
        unitMap[_name] = unitVec.length;
      }
      unitVec[unitMap[msg.id]] = msg;
      _results = [];
      for (_i = 0, _len = readingVec.length; _i < _len; _i++) {
        r = readingVec[_i];
        _results.push(adjust(r));
      }
      return _results;
    };
    adjust = function(row) {
      var info;
      info = unitVec[unitMap[row.tid]];
      row.value = row.raw;
      if (info != null) {
        row.key = info.name;
        row.unit = info.unit;
        if (info.factor) {
          row.value *= info.factor;
        }
        if (info.scale < 0) {
          row.value *= Math.pow(10, -info.scale);
        } else if (info.scale >= 0) {
          row.value /= Math.pow(10, info.scale);
          row.value = row.value.toFixed(info.scale);
        }
      }
      return row;
    };
    lookupMaps = {};
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('Attach', {
        In: '/sensor/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return readingHandler(m.Tag.slice(8), m.Msg);
        }
      });
      return jeebus.gadget('Attach', {
        In: '/driver/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return unitHandler(m.Tag.slice(8), m.Msg);
        }
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBRzFCLFFBQUEsaUdBQUE7QUFBQSxJQUFBLGNBQUEsR0FBaUIsU0FBQyxHQUFELEVBQU0sR0FBTixHQUFBO0FBRWYsVUFBQSw4Q0FBQTtBQUFBLE1BQUMsVUFBQSxHQUFELEVBQUssU0FBQSxFQUFMLEVBQVEsVUFBQSxHQUFSLEVBQVksVUFBQSxHQUFaLENBQUE7QUFDQTtXQUFBLFVBQUE7dUJBQUE7QUFDRSxRQUFBLEVBQUEsR0FBSyxFQUFBLEdBQUUsR0FBRixHQUFPLEtBQVAsR0FBVyxHQUFoQixDQUFBO0FBQUEsUUFDQSxHQUFBLEdBQU0sRUFBQSxHQUFFLEdBQUYsR0FBTyxHQUFQLEdBQVMsR0FEZixDQUFBOztVQUVBLFVBQVcsQ0FBQSxFQUFBLElBQU8sVUFBVSxDQUFDO1NBRjdCO0FBQUEsc0JBR0EsVUFBVyxDQUFBLFVBQVcsQ0FBQSxFQUFBLENBQVgsQ0FBWCxHQUE2QixNQUFBLENBQU87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QSxFQUFJLFVBQUo7T0FBeEIsQ0FDRSxDQUFDLEVBREgsQ0FDTSxLQUROLEVBQ2EsU0FBQyxDQUFELEdBQUE7QUFDVCxRQUFBLElBQUcsQ0FBQyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQU4sS0FBYyxHQUFqQjtpQkFDRSxXQUFBLENBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFOLENBQVksQ0FBWixDQUFaLEVBQTRCLENBQUMsQ0FBQyxHQUE5QixFQURGO1NBRFM7TUFBQSxDQURiLEVBTE87SUFBQSxDQXZDVCxDQUFBO0FBaURBLElBQUEsSUFBYSxNQUFNLENBQUMsWUFBUCxLQUF1QixXQUFwQztBQUFBLE1BQUEsTUFBQSxDQUFBLENBQUEsQ0FBQTtLQWpEQTtXQWtEQSxNQUFNLENBQUMsR0FBUCxDQUFXLFNBQVgsRUFBc0IsU0FBQSxHQUFBO2FBQUcsTUFBQSxDQUFBLEVBQUg7SUFBQSxDQUF0QixFQXJEMEI7RUFBQSxDQUE1QixDQVRBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ3N0YXR1cycsXG4gICAgdXJsOiAnL3N0YXR1cydcbiAgICB0ZW1wbGF0ZVVybDogJ3N0YXR1cy9zdGF0dXMuaHRtbCdcbiAgICBjb250cm9sbGVyOiAnU3RhdHVzQ3RybCdcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvc3RhdHVzJywgJ1N0YXR1cycsIDMwXG5cbm5nLmNvbnRyb2xsZXIgJ1N0YXR1c0N0cmwnLCAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICMgamVlYnVzLmF0dGFjaCAnc2Vuc29yJywgKGtleSwgcm93KSAtPiAuLi5cbiAgXG4gIHJlYWRpbmdIYW5kbGVyID0gKHRhZywgbXNnKSAtPlxuICAgICMgbG9jOiAuLi4gdmFsOiBbYzE6MTIsYzI6MzQsLi4uXVxuICAgIHtsb2MsbXMsdmFsLHR5cH0gPSBtc2dcbiAgICBmb3Iga2V5LCByYXcgb2YgdmFsXG4gICAgICBpZCA9IFwiI3t0YWd9IC0gI3trZXl9XCIgIyBkZXZpY2UgaWRcbiAgICAgIHRpZCA9IFwiI3t0eXB9LyN7a2V5fVwiICAjIHR5cGUgaWRcbiAgICAgIHJlYWRpbmdNYXBbaWRdID89IHJlYWRpbmdWZWMubGVuZ3RoXG4gICAgICByZWFkaW5nVmVjW3JlYWRpbmdNYXBbaWRdXSA9IGFkanVzdCB7bG9jLGtleSxyYXcsbXMsdHlwLGlkLHRpZH1cblxuICB1bml0SGFuZGxlciA9ICh0YWcsIG1zZykgLT5cbiAgICBtc2cuaWQgPSB0YWdcbiAgICAjIG5hbWU6IHVuaXQ6IHNjYWxlOiAuLi5cbiAgICB1bml0TWFwW21zZy5pZF0gPz0gdW5pdFZlYy5sZW5ndGhcbiAgICB1bml0VmVjW3VuaXRNYXBbbXNnLmlkXV0gPSBtc2dcbiAgICAjIHVwZGF0ZSBleGlzdGluZyByZWFkaW5nc1xuICAgIGFkanVzdCByICBmb3IgciBpbiByZWFkaW5nVmVjXG4gICAgXG4gIGFkanVzdCA9IChyb3cpIC0+XG4gICAgaW5mbyA9IHVuaXRWZWNbdW5pdE1hcFtyb3cudGlkXV1cbiAgICByb3cudmFsdWUgPSByb3cucmF3XG4gICAgaWYgaW5mbz9cbiAgICAgIHJvdy5rZXkgPSBpbmZvLm5hbWVcbiAgICAgIHJvdy51bml0ID0gaW5mby51bml0XG4gICAgICAjIGFwcGx5IHNvbWUgc2NhbGluZyBhbmQgZm9ybWF0dGluZ1xuICAgICAgaWYgaW5mby5mYWN0b3JcbiAgICAgICAgcm93LnZhbHVlICo9IGluZm8uZmFjdG9yXG4gICAgICBpZiBpbmZvLnNjYWxlIDwgMFxuICAgICAgICByb3cudmFsdWUgKj0gTWF0aC5wb3cgMTAsIC1pbmZvLnNjYWxlXG4gICAgICBlbHNlIGlmIGluZm8uc2NhbGUgPj0gMFxuICAgICAgICByb3cudmFsdWUgLz0gTWF0aC5wb3cgMTAsIGluZm8uc2NhbGVcbiAgICAgICAgcm93LnZhbHVlID0gcm93LnZhbHVlLnRvRml4ZWQgaW5mby5zY2FsZVxuICAgIHJvd1xuXG4gIGxvb2t1cE1hcHMgPSB7fVxuICByZWFkaW5nVmVjID0gJHNjb3BlLnJlYWRpbmdzID0gW11cbiAgcmVhZGluZ01hcCA9IHt9XG4gIHVuaXRWZWMgPSAkc2NvcGUudW5pdHMgPSBbXVxuICB1bml0TWFwID0ge31cblxuICBhdHRhY2ggPSAtPlxuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiAnL3NlbnNvci8nXG4gICAgICAub24gJ091dCcsIChtKSAtPlxuICAgICAgICBpZiBtLlRhZ1swXSBpc250ICc8J1xuICAgICAgICAgIHJlYWRpbmdIYW5kbGVyIG0uVGFnLnNsaWNlKDgpLCBtLk1zZ1xuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiAnL2RyaXZlci8nXG4gICAgICAub24gJ091dCcsIChtKSAtPlxuICAgICAgICBpZiBtLlRhZ1swXSBpc250ICc8J1xuICAgICAgICAgIHVuaXRIYW5kbGVyIG0uVGFnLnNsaWNlKDgpLCBtLk1zZ1xuXG4gIGF0dGFjaCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCAtPiBhdHRhY2goKVxuIl19
