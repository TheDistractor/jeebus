(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var attach, readingsMap;
    $scope.readings = [];
    readingsMap = {};
    attach = function() {
      var map, vec;
      vec = $scope.readings;
      map = readingsMap;
      return jeebus.gadget('MQTTSub', {
        Topic: '/sensor/#'
      }).on('Out', function(msg) {
        var Tag, id, key, loc, ms, typ, val, value, _ref, _results;
        Tag = msg.Tag, (_ref = msg.Msg, loc = _ref.loc, ms = _ref.ms, val = _ref.val, typ = _ref.typ);
        _results = [];
        for (key in val) {
          value = val[key];
          id = "" + (Tag.slice(8)) + " - " + key;
          if (map[id] == null) {
            map[id] = vec.length;
          }
          _results.push(vec[map[id]] = {
            loc: loc,
            key: key,
            value: value,
            ms: ms,
            typ: typ,
            id: id
          });
        }
        return _results;
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQzFCLFFBQUEsbUJBQUE7QUFBQSxJQUFBLE1BQU0sQ0FBQyxRQUFQLEdBQWtCLEVBQWxCLENBQUE7QUFBQSxJQUNBLFdBQUEsR0FBYyxFQURkLENBQUE7QUFBQSxJQU1BLE1BQUEsR0FBUyxTQUFBLEdBQUE7QUFDUCxVQUFBLFFBQUE7QUFBQSxNQUFBLEdBQUEsR0FBTSxNQUFNLENBQUMsUUFBYixDQUFBO0FBQUEsTUFDQSxHQUFBLEdBQU0sV0FETixDQUFBO2FBR0EsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFkLEVBQXlCO0FBQUEsUUFBQSxLQUFBLEVBQU8sV0FBUDtPQUF6QixDQUNFLENBQUMsRUFESCxDQUNNLEtBRE4sRUFDYSxTQUFDLEdBQUQsR0FBQTtBQUNULFlBQUEsc0RBQUE7QUFBQSxRQUFDLFVBQUEsR0FBRCxjQUFLLEtBQUssV0FBQSxLQUFJLFVBQUEsSUFBRyxXQUFBLEtBQUksV0FBQSxJQUFyQixDQUFBO0FBQ0E7YUFBQSxVQUFBOzJCQUFBO0FBQ0UsVUFBQSxFQUFBLEdBQUssRUFBQSxHQUFFLENBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsQ0FBRixHQUFnQixLQUFoQixHQUFvQixHQUF6QixDQUFBOztZQUNBLEdBQUksQ0FBQSxFQUFBLElBQU8sR0FBRyxDQUFDO1dBRGY7QUFBQSx3QkFFQSxHQUFJLENBQUEsR0FBSSxDQUFBLEVBQUEsQ0FBSixDQUFKLEdBQWU7QUFBQSxZQUFDLEtBQUEsR0FBRDtBQUFBLFlBQUssS0FBQSxHQUFMO0FBQUEsWUFBUyxPQUFBLEtBQVQ7QUFBQSxZQUFlLElBQUEsRUFBZjtBQUFBLFlBQWtCLEtBQUEsR0FBbEI7QUFBQSxZQUFzQixJQUFBLEVBQXRCO1lBRmYsQ0FERjtBQUFBO3dCQUZTO01BQUEsQ0FEYixFQUpPO0lBQUEsQ0FOVCxDQUFBO0FBd0JBLElBQUEsSUFBYSxNQUFNLENBQUMsWUFBUCxLQUF1QixXQUFwQztBQUFBLE1BQUEsTUFBQSxDQUFBLENBQUEsQ0FBQTtLQXhCQTtXQXlCQSxNQUFNLENBQUMsR0FBUCxDQUFXLFNBQVgsRUFBc0IsU0FBQSxHQUFBO2FBQUcsTUFBQSxDQUFBLEVBQUg7SUFBQSxDQUF0QixFQTFCMEI7RUFBQSxDQUE1QixDQVRBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ3N0YXR1cycsXG4gICAgdXJsOiAnL3N0YXR1cydcbiAgICB0ZW1wbGF0ZVVybDogJ3N0YXR1cy9zdGF0dXMuaHRtbCdcbiAgICBjb250cm9sbGVyOiAnU3RhdHVzQ3RybCdcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvc3RhdHVzJywgJ1N0YXR1cycsIDMwXG5cbm5nLmNvbnRyb2xsZXIgJ1N0YXR1c0N0cmwnLCAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICRzY29wZS5yZWFkaW5ncyA9IFtdXG4gIHJlYWRpbmdzTWFwID0ge31cblxuICAjICRzY29wZS5yZWFkaW5ncyA9IGplZWJ1cy5hdHRhY2ggJy9zZW5zb3IvJ1xuICAjICRzY29wZS4kb24gJyRkZXN0cm95JywgLT4gamVlYnVzLmRldGFjaCAnL3NlbnNvci8nXG5cbiAgYXR0YWNoID0gLT5cbiAgICB2ZWMgPSAkc2NvcGUucmVhZGluZ3NcbiAgICBtYXAgPSByZWFkaW5nc01hcFxuICAgIFxuICAgIGplZWJ1cy5nYWRnZXQgJ01RVFRTdWInLCBUb3BpYzogJy9zZW5zb3IvIydcbiAgICAgIC5vbiAnT3V0JywgKG1zZykgLT5cbiAgICAgICAge1RhZyxNc2c6e2xvYyxtcyx2YWwsdHlwfX0gPSBtc2dcbiAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgdmFsXG4gICAgICAgICAgaWQgPSBcIiN7VGFnLnNsaWNlKDgpfSAtICN7a2V5fVwiXG4gICAgICAgICAgbWFwW2lkXSA/PSB2ZWMubGVuZ3RoXG4gICAgICAgICAgdmVjW21hcFtpZF1dID0ge2xvYyxrZXksdmFsdWUsbXMsdHlwLGlkfVxuICAgICAgICAgICMgdW5sZXNzIG1hcFtpZF0/XG4gICAgICAgICAgIyAgIG1hcFtpZF0gPSB2ZWMubGVuZ3RoXG4gICAgICAgICAgIyAgIHZlYy5wdXNoIHtsb2Msa2V5LHZhbHVlLG1zLHR5cCxpZH1cbiAgICAgICAgICAjIHJvdyA9IHZlY1ttYXBbaWRdXVxuICAgICAgICAgICMgcm93LnZhbHVlID0gdmFsdWVcbiAgICAgICAgICAjIHJvdy5tcyA9IG1zXG5cbiAgYXR0YWNoKCkgIGlmICRzY29wZS5zZXJ2ZXJTdGF0dXMgaXMgJ2Nvbm5lY3RlZCdcbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIC0+IGF0dGFjaCgpXG5cbiMgIyBUT0RPOiBxdWljayB0ZXN0IHRvIHNlZSBob3cgaXQgY291bGQgd29yaywgdGhpcyBiZWxvbmdzIGluIGplZWJ1cy5jb2ZmZWVcbiMgYXR0YWNoID0gKHNjb3BlLCBuYW1lLCBwcmVmaXgpIC0+XG4jICAgdmVjID0gc2NvcGVbbmFtZV0gPz0gW11cbiMgICBtYXAgPSBzY29wZVtuYW1lKydNYXAnXSA/PSB7fVxuIyBcbiMgICBzY29wZS4kb24gJ3dzLW9wZW4nLCAtPlxuIyAgIFxuIyAgICAgamVlYnVzLmdhZGdldCAnTVFUVFN1YicsIFRvcGljOiBwcmVmaXggKyAnIydcbiMgICAgICAgLm9uICdPdXQnLCAobXNnKSAtPlxuIyAgICAgICAgIHtUYWcsTXNnOntsb2MsbXMsdmFsLHR5cH19ID0gbXNnXG4jICAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgdmFsXG4jICAgICAgICAgICBpZCA9IFwiI3tUYWcuc2xpY2UocHJlZml4Lmxlbmd0aCl9IC0gI3trZXl9XCJcbiMgICAgICAgICAgIGkgPSBtYXBbaWRdXG4jICAgICAgICAgICB1bmxlc3MgaT9cbiMgICAgICAgICAgICAgaSA9IG1hcFtpZF0gPSB2ZWMubGVuZ3RoXG4jICAgICAgICAgICAgIHZlYy5wdXNoXG4jICAgICAgICAgICAgICAgbG9jOiBsb2MsIGtleToga2V5LCB2YWx1ZTogXCJcIiwgZGF0ZTogXCJcIiwgdHlwOiB0eXAsIGlkOiBpZFxuIyAgICAgICAgICAgcm93ID0gdmVjW2ldXG4jICAgICAgICAgICByb3cudmFsdWUgPSB2YWx1ZVxuIyAgICAgICAgICAgcm93LnRpbWUgPSBtc1xuIyAgIFxuIyBhdHRhY2ggJHNjb3BlLCAncmVhZGluZ3MnLCAnL3NlbnNvci8nXG4iXX0=
