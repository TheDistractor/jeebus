(function() {
  var ng, statusCtrl;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: statusCtrl
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  statusCtrl = function($scope, jeebus) {
    var adjust, attach, lookupMaps, readingHandler, readingMap, readingVec, unitHandler, unitMap, unitVec;
    readingHandler = function(tag, msg) {
      var id, key, loc, ms, raw, typ, val, _results;
      loc = msg.loc, ms = msg.ms, val = msg.val, typ = msg.typ;
      _results = [];
      for (key in val) {
        raw = val[key];
        id = "" + tag + " - " + key;
        if (readingMap[id] == null) {
          readingMap[id] = readingVec.length;
        }
        _results.push(readingVec[readingMap[id]] = adjust({
          loc: loc,
          key: key,
          raw: raw,
          ms: ms,
          typ: typ,
          id: id
        }));
      }
      return _results;
    };
    unitHandler = function(tag, msg) {
      var r, _i, _len, _name, _results;
      msg.id = tag;
      if (unitMap[_name = msg.id] == null) {
        unitMap[_name] = unitVec.length;
      }
      unitVec[unitMap[msg.id]] = msg;
      _results = [];
      for (_i = 0, _len = readingVec.length; _i < _len; _i++) {
        r = readingVec[_i];
        _results.push(adjust(r));
      }
      return _results;
    };
    adjust = function(row) {
      var info, tid;
      row.value = row.raw;
      tid = "" + row.typ + "/" + row.key;
      info = unitVec[unitMap[tid]];
      if (info != null) {
        row.key = info.name;
        row.unit = info.unit;
        if (info.factor) {
          row.value *= info.factor;
        }
        if (info.scale < 0) {
          row.value *= Math.pow(10, -info.scale);
        } else if (info.scale >= 0) {
          row.value /= Math.pow(10, info.scale);
          row.value = row.value.toFixed(info.scale);
        }
      }
      return row;
    };
    lookupMaps = {};
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('Attach', {
        In: '/sensor/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return readingHandler(m.Tag.slice(8), m.Msg);
        }
      });
      return jeebus.gadget('Attach', {
        In: '/driver/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return unitHandler(m.Tag.slice(8), m.Msg);
        }
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsY0FBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFVBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxVQUFBLEdBQWEsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBUVgsUUFBQSxpR0FBQTtBQUFBLElBQUEsY0FBQSxHQUFpQixTQUFDLEdBQUQsRUFBTSxHQUFOLEdBQUE7QUFFZixVQUFBLHlDQUFBO0FBQUEsTUFBQyxVQUFBLEdBQUQsRUFBSyxTQUFBLEVBQUwsRUFBUSxVQUFBLEdBQVIsRUFBWSxVQUFBLEdBQVosQ0FBQTtBQUNBO1dBQUEsVUFBQTt1QkFBQTtBQUNFLFFBQUEsRUFBQSxHQUFLLEVBQUEsR0FBRSxHQUFGLEdBQU8sS0FBUCxHQUFXLEdBQWhCLENBQUE7O1VBQ0EsVUFBVyxDQUFBLEVBQUEsSUFBTyxVQUFVLENBQUM7U0FEN0I7QUFBQSxzQkFFQSxVQUFXLENBQUEsVUFBVyxDQUFBLEVBQUEsQ0FBWCxDQUFYLEdBQTZCLE1BQUEsQ0FBTztBQUFBLFVBQUMsS0FBQSxHQUFEO0FBQUEsVUFBSyxLQUFBLEdBQUw7QUFBQSxVQUFTLEtBQUEsR0FBVDtBQUFBLFVBQWEsSUFBQSxFQUFiO0FB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Q0FDTSxLQUROLEVBQ2EsU0FBQyxDQUFELEdBQUE7QUFDVCxRQUFBLElBQUcsQ0FBQyxDQUFDLEdBQUksQ0FBQSxDQUFBLENBQU4sS0FBYyxHQUFqQjtpQkFDRSxXQUFBLENBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFOLENBQVksQ0FBWixDQUFaLEVBQTRCLENBQUMsQ0FBQyxHQUE5QixFQURGO1NBRFM7TUFBQSxDQURiLEVBTE87SUFBQSxDQXZDVCxDQUFBO0FBaURBLElBQUEsSUFBYSxNQUFNLENBQUMsWUFBUCxLQUF1QixXQUFwQztBQUFBLE1BQUEsTUFBQSxDQUFBLENBQUEsQ0FBQTtLQWpEQTtXQWtEQSxNQUFNLENBQUMsR0FBUCxDQUFXLFNBQVgsRUFBc0IsU0FBQSxHQUFBO2FBQUcsTUFBQSxDQUFBLEVBQUg7SUFBQSxDQUF0QixFQTFEVztFQUFBLENBVGIsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnc3RhdHVzJyxcbiAgICB1cmw6ICcvc3RhdHVzJ1xuICAgIHRlbXBsYXRlVXJsOiAnc3RhdHVzL3N0YXR1cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6IHN0YXR1c0N0cmxcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvc3RhdHVzJywgJ1N0YXR1cycsIDMwXG5cbnN0YXR1c0N0cmwgPSAoJHNjb3BlLCBqZWVidXMpIC0+XG4gICMgamVlYnVzLmF0dGFjaCAnc2Vuc29yJywgKGtleSwgcm93KSAtPiAuLi5cbiAgI1xuICAjICRzY29wZS5tb2RlbHMuYXR0YWNoICdzZW5zb3InLCAoa2V5LCByb3cpIC0+IC4uLlxuICAjXG4gICMgJHNjb3BlLnNlbnNvciA9IGplZWJ1cy5hdHRhY2ggJ3NlbnNvcicsIChrZXksIHJvdykgLT4gLi4uXG4gICMgJHNjb3BlLiRvbiAnJGRlc3Ryb3knIGplZWJ1cy5kZXRhY2ggJ3NlbnNvcidcbiAgXG4gIHJlYWRpbmdIYW5kbGVyID0gKHRhZywgbXNnKSAtPlxuICAgICMgbG9jOiAuLi4gdmFsOiBbYzE6MTIsYzI6MzQsLi4uXVxuICAgIHtsb2MsbXMsdmFsLHR5cH0gPSBtc2dcbiAgICBmb3Iga2V5LCByYXcgb2YgdmFsXG4gICAgICBpZCA9IFwiI3t0YWd9IC0gI3trZXl9XCIgIyBkZXZpY2UgaWRcbiAgICAgIHJlYWRpbmdNYXBbaWRdID89IHJlYWRpbmdWZWMubGVuZ3RoXG4gICAgICByZWFkaW5nVmVjW3JlYWRpbmdNYXBbaWRdXSA9IGFkanVzdCB7bG9jLGtleSxyYXcsbXMsdHlwLGlkfVxuXG4gIHVuaXRIYW5kbGVyID0gKHRhZywgbXNnKSAtPlxuICAgIG1zZy5pZCA9IHRhZ1xuICAgICMgbmFtZTogdW5pdDogc2NhbGU6IC4uLlxuICAgIHVuaXRNYXBbbXNnLmlkXSA/PSB1bml0VmVjLmxlbmd0aFxuICAgIHVuaXRWZWNbdW5pdE1hcFttc2cuaWRdXSA9IG1zZ1xuICAgICMgdXBkYXRlIGV4aXN0aW5nIHJlYWRpbmdzXG4gICAgYWRqdXN0IHIgIGZvciByIGluIHJlYWRpbmdWZWNcbiAgICBcbiAgYWRqdXN0ID0gKHJvdykgLT5cbiAgICByb3cudmFsdWUgPSByb3cucmF3XG4gICAgdGlkID0gXCIje3Jvdy50eXB9LyN7cm93LmtleX1cIlxuICAgIGluZm8gPSB1bml0VmVjW3VuaXRNYXBbdGlkXV1cbiAgICBpZiBpbmZvP1xuICAgICAgcm93LmtleSA9IGluZm8ubmFtZVxuICAgICAgcm93LnVuaXQgPSBpbmZvLnVuaXRcbiAgICAgICMgYXBwbHkgc29tZSBzY2FsaW5nIGFuZCBmb3JtYXR0aW5nXG4gICAgICBpZiBpbmZvLmZhY3RvclxuICAgICAgICByb3cudmFsdWUgKj0gaW5mby5mYWN0b3JcbiAgICAgIGlmIGluZm8uc2NhbGUgPCAwXG4gICAgICAgIHJvdy52YWx1ZSAqPSBNYXRoLnBvdyAxMCwgLWluZm8uc2NhbGVcbiAgICAgIGVsc2UgaWYgaW5mby5zY2FsZSA+PSAwXG4gICAgICAgIHJvdy52YWx1ZSAvPSBNYXRoLnBvdyAxMCwgaW5mby5zY2FsZVxuICAgICAgICByb3cudmFsdWUgPSByb3cudmFsdWUudG9GaXhlZCBpbmZvLnNjYWxlXG4gICAgcm93XG5cbiAgbG9va3VwTWFwcyA9IHt9XG4gIHJlYWRpbmdWZWMgPSAkc2NvcGUucmVhZGluZ3MgPSBbXVxuICByZWFkaW5nTWFwID0ge31cbiAgdW5pdFZlYyA9ICRzY29wZS51bml0cyA9IFtdXG4gIHVuaXRNYXAgPSB7fVxuXG4gIGF0dGFjaCA9IC0+XG4gICAgamVlYnVzLmdhZGdldCAnQXR0YWNoJywgSW46ICcvc2Vuc29yLydcbiAgICAgIC5vbiAnT3V0JywgKG0pIC0+XG4gICAgICAgIGlmIG0uVGFnWzBdIGlzbnQgJzwnXG4gICAgICAgICAgcmVhZGluZ0hhbmRsZXIgbS5UYWcuc2xpY2UoOCksIG0uTXNnXG4gICAgamVlYnVzLmdhZGdldCAnQXR0YWNoJywgSW46ICcvZHJpdmVyLydcbiAgICAgIC5vbiAnT3V0JywgKG0pIC0+XG4gICAgICAgIGlmIG0uVGFnWzBdIGlzbnQgJzwnXG4gICAgICAgICAgdW5pdEhhbmRsZXIgbS5UYWcuc2xpY2UoOCksIG0uTXNnXG5cbiAgYXR0YWNoKCkgIGlmICRzY29wZS5zZXJ2ZXJTdGF0dXMgaXMgJ2Nvbm5lY3RlZCdcbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIC0+IGF0dGFjaCgpXG4iXX0=
