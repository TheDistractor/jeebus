(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var attach, readingMap, readingVec, unitMap, unitVec, update;
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('MQTTSub', {
        Topic: '/sensor/#'
      }).on('Out', function(msg) {
        var dev, did, key, loc, ms, raw, tid, typ, val, _ref, _results;
        dev = msg.Tag, (_ref = msg.Msg, loc = _ref.loc, ms = _ref.ms, val = _ref.val, typ = _ref.typ);
        _results = [];
        for (key in val) {
          raw = val[key];
          did = "" + (dev.slice(8)) + "/" + key;
          tid = "" + typ + "/" + key;
          if (readingMap[did] == null) {
            readingMap[did] = readingVec.length;
          }
          _results.push(readingVec[readingMap[did]] = update({
            loc: loc,
            key: key,
            raw: raw,
            ms: ms,
            typ: typ,
            did: did,
            tid: tid
          }));
        }
        return _results;
      });
      return jeebus.gadget('MQTTSub', {
        Topic: '/driver/#'
      }).on('Out', function(msg) {
        var info, row, tag, tid, _i, _len, _results;
        tag = msg.Tag, info = msg.Msg;
        tid = "" + (Tag.slice(8)) + " - " + key;
        if (unitMap[tid] == null) {
          unitMap[tid] = unitVec.length;
        }
        unitVec[unitMap[tid]] = info;
        _results = [];
        for (_i = 0, _len = readingVec.length; _i < _len; _i++) {
          row = readingVec[_i];
          _results.push(update(row));
        }
        return _results;
      });
    };
    update = function(row) {
      var info;
      info = unitVec[unitMap[row.tid]];
      if (info != null) {
        row.name = info.name;
        row.unit = info.unit;
      }
      row.value = row.raw;
      return row;
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQzFCLFFBQUEsd0RBQUE7QUFBQSxJQUFBLFVBQUEsR0FBYSxNQUFNLENBQUMsUUFBUCxHQUFrQixFQUEvQixDQUFBO0FBQUEsSUFDQSxVQUFBLEdBQWEsRUFEYixDQUFBO0FBQUEsSUFFQSxPQUFBLEdBQVUsTUFBTSxDQUFDLEtBQVAsR0FBZSxFQUZ6QixDQUFBO0FBQUEsSUFHQSxPQUFBLEdBQVUsRUFIVixDQUFBO0FBQUEsSUFLQSxNQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsTUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjLFNBQWQsRUFBeUI7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO09BQXpCLENBQ0UsQ0FBQyxFQURILENBQ00sS0FETixFQUNhLFNBQUMsR0FBRCxHQUFBO0FBRVQsWUFBQSwwREFBQTtBQUFBLFFBQUssVUFBSixHQUFELGNBQVMsS0FBSyxXQUFBLEtBQUksVUFBQSxJQUFHLFdBQUEsS0FBSSxXQUFBLElBQXpCLENBQUE7QUFDQTthQUFBLFVBQUE7eUJBQUE7QUFDRSxVQUFBLEdBQUEsR0FBTSxFQUFBLEdBQUUsQ0FBQSxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsQ0FBQSxDQUFGLEdBQWdCLEdBQWhCLEdBQWtCLEdBQXhCLENBQUE7QUFBQSxVQUNBLEdBQUEsR0FBTSxFQUFBLEdBQUUsR0FBRixHQUFPLEdBQVAsR0FBUyxHQURmLENBQUE7O1lBRUEsVUFBVyxDQUFBLEdBQUEsSUFBUSxVQUFVLENBQUM7V0FGOUI7QUFBQSx3QkFHQSxVQUFXLENBQUEsVUFBVyxDQUFBLEdBQUEsQ0FBWCxDQUFYLEdBQThCLE1BQUEsQ0FBTztBQUFBLFlBQUMsS0FBQSxHQUFEO0FBQUEsWUFBSyxLQUFBLEdBQUw7QUFBQSxZQUFTLEtBQUEsR0FBVDtBQUFBLFlBQWEsSUFBQSxFQUFiO0FBQUEsWUFBZ0IsS0FBQSxHQUFoQjtBQUFBLFlBQW9CLEtBQUEsR0FBcEI7QUFBQSxZQUF3QixLQUFBLEdBQXhCO1dBQVAsRUFIOUIsQ0FERjtBQUFBO3dCQUhTO01BQUEsQ0FEYixDQUFBLENBQUE7YUFVQSxNQUFNLENBQUMsTUFBUCxDQUFjLFNBQWQsRUFBeUI7QUFBQSxRQUFBLEtBQUEsRUFBTyxXQUFQO09BQXpCLENBQ0UsQ0FBQyxFQURILENBQ00sS0FETixFQUNhLFNBQUMsR0FBRCxHQUFBO0FBRVQsWUFBQSx1Q0FBQTtBQUFBLFFBQUssVUFBSixHQUFELEVBQWEsV0FBSixHQUFULENBQUE7QUFBQSxRQUNBLEdBQUEsR0FBTSxFQUFBLEdBQUUsQ0FBQSxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsQ0FBQSxDQUFGLEdBQWdCLEtBQWhCLEdBQW9CLEdBRDFCLENBQUE7O1VBRUEsT0FBUSxDQUFBLEdBQUEsSUFBUSxPQUFPLENBQUM7U0FGeEI7QUFBQSxRQUdBLE9BQVEsQ0FBQSxPQUFRLENBQUEsR0FBQSxDQUFSLENBQVIsR0FBd0IsSUFIeEIsQ0FBQTtBQUtBO2FBQUEsaURBQUE7K0JBQUE7QUFBQSx3QkFBQSxNQUFBLENBQU8sR0FBUCxFQUFBLENBQUE7QUFBQTt3QkFQUztNQUFBLENBRGIsRUFYTztJQUFBLENBTFQsQ0FBQTtBQUFBLElBMEJBLE1BQUEsR0FBUyxTQUFDLEdBQUQsR0FBQTtBQUNQLFVBQUEsSUFBQTtBQUFBLE1BQUEsSUFBQSxHQUFPLE9BQVEsQ0FBQSxPQUFRLENBQUEsR0FBRyxDQUFDLEdBQUosQ0FBUixDQUFmLENBQUE7QUFDQSxNQUFBLElBQUcsWUFBSDtBQUNFLFFBQUEsR0FBRyxDQUFDLElBQUosR0FBVyxJQUFJLENBQUMsSUFBaEIsQ0FBQTtBQUFBLFFBQ0EsR0FBRyxDQUFDLElBQUosR0FBVyxJQUFJLENBQUMsSUFEaEIsQ0FERjtPQURBO0FBQUEsTUFJQSxHQUFHLENBQUMsS0FBSixHQUFZLEdBQUcsQ0FBQyxHQUpoQixDQUFBO2FBS0EsSUFOTztJQUFBLENBMUJULENBQUE7QUFrQ0EsSUFBQSxJQUFhLE1BQU0sQ0FBQyxZQUFQLEtBQXVCLFdBQXBDO0FBQUEsTUFBQSxNQUFBLENBQUEsQ0FBQSxDQUFBO0tBbENBO1dBbUNBLE1BQU0sQ0FBQyxHQUFQLENBQVcsU0FBWCxFQUFzQixTQUFBLEdBQUE7YUFBRyxNQUFBLENBQUEsRUFBSDtJQUFBLENBQXRCLEVBcEMwQjtFQUFBLENBQTVCLENBVEEsQ0FBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsibmcgPSBhbmd1bGFyLm1vZHVsZSAnbXlBcHAnXG5cbm5nLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIsIG5hdmJhclByb3ZpZGVyKSAtPlxuICAkc3RhdGVQcm92aWRlci5zdGF0ZSAnc3RhdHVzJyxcbiAgICB1cmw6ICcvc3RhdHVzJ1xuICAgIHRlbXBsYXRlVXJsOiAnc3RhdHVzL3N0YXR1cy5odG1sJ1xuICAgIGNvbnRyb2xsZXI6ICdTdGF0dXNDdHJsJ1xuICBuYXZiYXJQcm92aWRlci5hZGQgJy9zdGF0dXMnLCAnU3RhdHVzJywgMzBcblxubmcuY29udHJvbGxlciAnU3RhdHVzQ3RybCcsICgkc2NvcGUsIGplZWJ1cykgLT5cbiAgcmVhZGluZ1ZlYyA9ICRzY29wZS5yZWFkaW5ncyA9IFtdXG4gIHJlYWRpbmdNYXAgPSB7fVxuICB1bml0VmVjID0gJHNjb3BlLnVuaXRzID0gW11cbiAgdW5pdE1hcCA9IHt9XG5cbiAgYXR0YWNoID0gLT5cbiAgICBqZWVidXMuZ2FkZ2V0ICdNUVRUU3ViJywgVG9waWM6ICcvc2Vuc29yLyMnXG4gICAgICAub24gJ091dCcsIChtc2cpIC0+XG4gICAgICAgICMgbG9jOiAuLi4gdmFsOiBbYzE6MTIsYzI6MzQsLi4uXVxuICAgICAgICB7VGFnOmRldixNc2c6e2xvYyxtcyx2YWwsdHlwfX0gPSBtc2dcbiAgICAgICAgZm9yIGtleSwgcmF3IG9mIHZhbFxuICAgICAgICAgIGRpZCA9IFwiI3tkZXYuc2xpY2UoOCl9LyN7a2V5fVwiICMgZGV2aWNlIGlkXG4gICAgICAgICAgdGlkID0gXCIje3R5cH0vI3trZXl9XCIgICAgICAgICAgIyB0eXBlIGlkXG4gICAgICAgICAgcmVhZGluZ01hcFtkaWRdID89IHJlYWRpbmdWZWMubGVuZ3RoXG4gICAgICAgICAgcmVhZGluZ1ZlY1tyZWFkaW5nTWFwW2RpZF1dID0gdXBkYXRlIHtsb2Msa2V5LHJhdyxtcyx0eXAsZGlkLHRpZH1cbiAgICAgICAgICBcbiAgICBqZWVidXMuZ2FkZ2V0ICdNUVRUU3ViJywgVG9waWM6ICcvZHJpdmVyLyMnXG4gICAgICAub24gJ091dCcsIChtc2cpIC0+XG4gICAgICAgICMgbmFtZTogdW5pdDogc2NhbGU6IC4uLlxuICAgICAgICB7VGFnOnRhZyxNc2c6aW5mb30gPSBtc2dcbiAgICAgICAgdGlkID0gXCIje1RhZy5zbGljZSg4KX0gLSAje2tleX1cIlxuICAgICAgICB1bml0TWFwW3RpZF0gPz0gdW5pdFZlYy5sZW5ndGhcbiAgICAgICAgdW5pdFZlY1t1bml0TWFwW3RpZF1dID0gaW5mb1xuICAgICAgICAjIHVwZGF0ZSBleGlzdGluZyByZWFkaW5nc1xuICAgICAgICB1cGRhdGUgcm93ICBmb3Igcm93IGluIHJlYWRpbmdWZWNcblxuICB1cGRhdGUgPSAocm93KSAtPlxuICAgIGluZm8gPSB1bml0VmVjW3VuaXRNYXBbcm93LnRpZF1dXG4gICAgaWYgaW5mbz9cbiAgICAgIHJvdy5uYW1lID0gaW5mby5uYW1lXG4gICAgICByb3cudW5pdCA9IGluZm8udW5pdFxuICAgIHJvdy52YWx1ZSA9IHJvdy5yYXdcbiAgICByb3dcblxuICBhdHRhY2goKSAgaWYgJHNjb3BlLnNlcnZlclN0YXR1cyBpcyAnY29ubmVjdGVkJ1xuICAkc2NvcGUuJG9uICd3cy1vcGVuJywgLT4gYXR0YWNoKClcbiJdfQ==
