(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var adjust, attach, lookupMaps, readingHandler, readingMap, readingVec, unitHandler, unitMap, unitVec;
    readingHandler = function(tag, msg) {
      var id, key, loc, ms, raw, typ, val, _results;
      loc = msg.loc, ms = msg.ms, val = msg.val, typ = msg.typ;
      _results = [];
      for (key in val) {
        raw = val[key];
        id = "" + tag + " - " + key;
        if (readingMap[id] == null) {
          readingMap[id] = readingVec.length;
        }
        _results.push(readingVec[readingMap[id]] = adjust({
          loc: loc,
          key: key,
          raw: raw,
          ms: ms,
          typ: typ,
          id: id
        }));
      }
      return _results;
    };
    unitHandler = function(tag, msg) {
      var r, _i, _len, _name, _results;
      msg.id = tag;
      if (unitMap[_name = msg.id] == null) {
        unitMap[_name] = unitVec.length;
      }
      unitVec[unitMap[msg.id]] = msg;
      _results = [];
      for (_i = 0, _len = readingVec.length; _i < _len; _i++) {
        r = readingVec[_i];
        _results.push(adjust(r));
      }
      return _results;
    };
    adjust = function(row) {
      var info, tid;
      row.value = row.raw;
      tid = "" + row.typ + "/" + row.key;
      info = unitVec[unitMap[tid]];
      if (info != null) {
        row.key = info.name;
        row.unit = info.unit;
        if (info.factor) {
          row.value *= info.factor;
        }
        if (info.scale < 0) {
          row.value *= Math.pow(10, -info.scale);
        } else if (info.scale >= 0) {
          row.value /= Math.pow(10, info.scale);
          row.value = row.value.toFixed(info.scale);
        }
      }
      return row;
    };
    lookupMaps = {};
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('Attach', {
        In: '/sensor/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return readingHandler(m.Tag.slice(8), m.Msg);
        }
      });
      return jeebus.gadget('Attach', {
        In: '/driver/'
      }).on('Out', function(m) {
        if (m.Tag[0] !== '<') {
          return unitHandler(m.Tag.slice(8), m.Msg);
        }
      });
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBUTFCLFFBQUEsaUdBQUE7QUFBQSxJQUFBLGNBQUEsR0FBaUIsU0FBQyxHQUFELEVBQU0sR0FBTixHQUFBO0FBRWYsVUFBQSx5Q0FBQTtBQUFBLE1BQUMsVUFBQSxHQUFELEVBQUssU0FBQSxFQUFMLEVBQVEsVUFBQSxHQUFSLEVBQVksVUFBQSxHQUFaLENBQUE7QUFDQTtXQUFBLFVBQUE7dUJBQUE7QUFDRSxRQUFBLEVBQUEsR0FBSyxFQUFBLEdBQUUsR0FBRixHQUFPLEtBQVAsR0FBVyxHQUFoQixDQUFBOztVQUNBLFVBQVcsQ0FBQSxFQUFBLElBQU8sVUFBVSxDQUFDO1NBRDdCO0FBQUEsc0JBRUEsVUFBVyxDQUFBLFVBQVcsQ0FBQSxFQUFBLENBQVgsQ0FBWCxHQUE2QixNQUFBLENBQU87QUFBQSxVQUFDLEtBQUEsR0FBRDtBQUFBLFVBQUssS0FBQSxHQUFMO0FBQUEsVUFBUyxLQUFBLEdBQVQ7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O09BQXhCLENBQ0UsQ0FBQyxFQURILENBQ00sS0FETixFQUNhLFNBQUMsQ0FBRCxHQUFBO0FBQ1QsUUFBQSxJQUFHLENBQUMsQ0FBQyxHQUFJLENBQUEsQ0FBQSxDQUFOLEtBQWMsR0FBakI7aUJBQ0UsV0FBQSxDQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBTixDQUFZLENBQVosQ0FBWixFQUE0QixDQUFDLENBQUMsR0FBOUIsRUFERjtTQURTO01BQUEsQ0FEYixFQUxPO0lBQUEsQ0F2Q1QsQ0FBQTtBQWlEQSxJQUFBLElBQWEsTUFBTSxDQUFDLFlBQVAsS0FBdUIsV0FBcEM7QUFBQSxNQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUE7S0FqREE7V0FrREEsTUFBTSxDQUFDLEdBQVAsQ0FBVyxTQUFYLEVBQXNCLFNBQUEsR0FBQTthQUFHLE1BQUEsQ0FBQSxFQUFIO0lBQUEsQ0FBdEIsRUExRDBCO0VBQUEsQ0FBNUIsQ0FUQSxDQUFBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJuZyA9IGFuZ3VsYXIubW9kdWxlICdteUFwcCdcblxubmcuY29uZmlnICgkc3RhdGVQcm92aWRlciwgbmF2YmFyUHJvdmlkZXIpIC0+XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlICdzdGF0dXMnLFxuICAgIHVybDogJy9zdGF0dXMnXG4gICAgdGVtcGxhdGVVcmw6ICdzdGF0dXMvc3RhdHVzLmh0bWwnXG4gICAgY29udHJvbGxlcjogJ1N0YXR1c0N0cmwnXG4gIG5hdmJhclByb3ZpZGVyLmFkZCAnL3N0YXR1cycsICdTdGF0dXMnLCAzMFxuXG5uZy5jb250cm9sbGVyICdTdGF0dXNDdHJsJywgKCRzY29wZSwgamVlYnVzKSAtPlxuICAjIGplZWJ1cy5hdHRhY2ggJ3NlbnNvcicsIChrZXksIHJvdykgLT4gLi4uXG4gICNcbiAgIyAkc2NvcGUubW9kZWxzLmF0dGFjaCAnc2Vuc29yJywgKGtleSwgcm93KSAtPiAuLi5cbiAgI1xuICAjICRzY29wZS5zZW5zb3IgPSBqZWVidXMuYXR0YWNoICdzZW5zb3InLCAoa2V5LCByb3cpIC0+IC4uLlxuICAjICRzY29wZS4kb24gJyRkZXN0cm95JyBqZWVidXMuZGV0YWNoICdzZW5zb3InXG4gIFxuICByZWFkaW5nSGFuZGxlciA9ICh0YWcsIG1zZykgLT5cbiAgICAjIGxvYzogLi4uIHZhbDogW2MxOjEyLGMyOjM0LC4uLl1cbiAgICB7bG9jLG1zLHZhbCx0eXB9ID0gbXNnXG4gICAgZm9yIGtleSwgcmF3IG9mIHZhbFxuICAgICAgaWQgPSBcIiN7dGFnfSAtICN7a2V5fVwiICMgZGV2aWNlIGlkXG4gICAgICByZWFkaW5nTWFwW2lkXSA/PSByZWFkaW5nVmVjLmxlbmd0aFxuICAgICAgcmVhZGluZ1ZlY1tyZWFkaW5nTWFwW2lkXV0gPSBhZGp1c3Qge2xvYyxrZXkscmF3LG1zLHR5cCxpZH1cblxuICB1bml0SGFuZGxlciA9ICh0YWcsIG1zZykgLT5cbiAgICBtc2cuaWQgPSB0YWdcbiAgICAjIG5hbWU6IHVuaXQ6IHNjYWxlOiAuLi5cbiAgICB1bml0TWFwW21zZy5pZF0gPz0gdW5pdFZlYy5sZW5ndGhcbiAgICB1bml0VmVjW3VuaXRNYXBbbXNnLmlkXV0gPSBtc2dcbiAgICAjIHVwZGF0ZSBleGlzdGluZyByZWFkaW5nc1xuICAgIGFkanVzdCByICBmb3IgciBpbiByZWFkaW5nVmVjXG4gICAgXG4gIGFkanVzdCA9IChyb3cpIC0+XG4gICAgcm93LnZhbHVlID0gcm93LnJhd1xuICAgIHRpZCA9IFwiI3tyb3cudHlwfS8je3Jvdy5rZXl9XCJcbiAgICBpbmZvID0gdW5pdFZlY1t1bml0TWFwW3RpZF1dXG4gICAgaWYgaW5mbz9cbiAgICAgIHJvdy5rZXkgPSBpbmZvLm5hbWVcbiAgICAgIHJvdy51bml0ID0gaW5mby51bml0XG4gICAgICAjIGFwcGx5IHNvbWUgc2NhbGluZyBhbmQgZm9ybWF0dGluZ1xuICAgICAgaWYgaW5mby5mYWN0b3JcbiAgICAgICAgcm93LnZhbHVlICo9IGluZm8uZmFjdG9yXG4gICAgICBpZiBpbmZvLnNjYWxlIDwgMFxuICAgICAgICByb3cudmFsdWUgKj0gTWF0aC5wb3cgMTAsIC1pbmZvLnNjYWxlXG4gICAgICBlbHNlIGlmIGluZm8uc2NhbGUgPj0gMFxuICAgICAgICByb3cudmFsdWUgLz0gTWF0aC5wb3cgMTAsIGluZm8uc2NhbGVcbiAgICAgICAgcm93LnZhbHVlID0gcm93LnZhbHVlLnRvRml4ZWQgaW5mby5zY2FsZVxuICAgIHJvd1xuXG4gIGxvb2t1cE1hcHMgPSB7fVxuICByZWFkaW5nVmVjID0gJHNjb3BlLnJlYWRpbmdzID0gW11cbiAgcmVhZGluZ01hcCA9IHt9XG4gIHVuaXRWZWMgPSAkc2NvcGUudW5pdHMgPSBbXVxuICB1bml0TWFwID0ge31cblxuICBhdHRhY2ggPSAtPlxuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiAnL3NlbnNvci8nXG4gICAgICAub24gJ091dCcsIChtKSAtPlxuICAgICAgICBpZiBtLlRhZ1swXSBpc250ICc8J1xuICAgICAgICAgIHJlYWRpbmdIYW5kbGVyIG0uVGFnLnNsaWNlKDgpLCBtLk1zZ1xuICAgIGplZWJ1cy5nYWRnZXQgJ0F0dGFjaCcsIEluOiAnL2RyaXZlci8nXG4gICAgICAub24gJ091dCcsIChtKSAtPlxuICAgICAgICBpZiBtLlRhZ1swXSBpc250ICc8J1xuICAgICAgICAgIHVuaXRIYW5kbGVyIG0uVGFnLnNsaWNlKDgpLCBtLk1zZ1xuXG4gIGF0dGFjaCgpICBpZiAkc2NvcGUuc2VydmVyU3RhdHVzIGlzICdjb25uZWN0ZWQnXG4gICRzY29wZS4kb24gJ3dzLW9wZW4nLCAtPiBhdHRhY2goKVxuIl19
