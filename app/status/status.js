(function() {
  var ng;

  ng = angular.module('myApp');

  ng.config(function($stateProvider, navbarProvider) {
    $stateProvider.state('status', {
      url: '/status',
      templateUrl: 'status/status.html',
      controller: 'StatusCtrl'
    });
    return navbarProvider.add('/status', 'Status', 30);
  });

  ng.controller('StatusCtrl', function($scope, jeebus) {
    var attach, readingMap, readingVec, unitMap, unitVec, update;
    readingVec = $scope.readings = [];
    readingMap = {};
    unitVec = $scope.units = [];
    unitMap = {};
    attach = function() {
      jeebus.gadget('Attach', {
        In: '/sensor/'
      }).on('Out', function(msg) {
        var dev, did, key, loc, ms, raw, tid, typ, val, _ref, _results;
        dev = msg.Tag, (_ref = msg.Msg, loc = _ref.loc, ms = _ref.ms, val = _ref.val, typ = _ref.typ);
        _results = [];
        for (key in val) {
          raw = val[key];
          did = "" + (dev.slice(8)) + " - " + key;
          tid = "" + typ + " - " + key;
          if (readingMap[did] == null) {
            readingMap[did] = readingVec.length;
          }
          _results.push(readingVec[readingMap[did]] = update({
            loc: loc,
            key: key,
            raw: raw,
            ms: ms,
            typ: typ,
            did: did,
            tid: tid
          }));
        }
        return _results;
      });
      return jeebus.gadget('Attach', {
        Topic: '/driver/'
      }).on('Out', function(msg) {
        var info, row, tag, tid, _i, _len, _results;
        tag = msg.Tag, info = msg.Msg;
        tid = "" + (Tag.slice(8)) + " - " + key;
        if (unitMap[tid] == null) {
          unitMap[tid] = unitVec.length;
        }
        unitVec[unitMap[tid]] = info;
        _results = [];
        for (_i = 0, _len = readingVec.length; _i < _len; _i++) {
          row = readingVec[_i];
          _results.push(update(row));
        }
        return _results;
      });
    };
    update = function(row) {
      var info;
      info = unitVec[unitMap[row.tid]];
      if (info != null) {
        row.name = info.name;
        row.unit = info.unit;
      }
      row.value = row.raw;
      return row;
    };
    if ($scope.serverStatus === 'connected') {
      attach();
    }
    return $scope.$on('ws-open', function() {
      return attach();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsRUFBQTs7QUFBQSxFQUFBLEVBQUEsR0FBSyxPQUFPLENBQUMsTUFBUixDQUFlLE9BQWYsQ0FBTCxDQUFBOztBQUFBLEVBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxTQUFDLGNBQUQsRUFBaUIsY0FBakIsR0FBQTtBQUNSLElBQUEsY0FBYyxDQUFDLEtBQWYsQ0FBcUIsUUFBckIsRUFDRTtBQUFBLE1BQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxNQUNBLFdBQUEsRUFBYSxvQkFEYjtBQUFBLE1BRUEsVUFBQSxFQUFZLFlBRlo7S0FERixDQUFBLENBQUE7V0FJQSxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUE4QixRQUE5QixFQUF3QyxFQUF4QyxFQUxRO0VBQUEsQ0FBVixDQUZBLENBQUE7O0FBQUEsRUFTQSxFQUFFLENBQUMsVUFBSCxDQUFjLFlBQWQsRUFBNEIsU0FBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQzFCLFFBQUEsd0RBQUE7QUFBQSxJQUFBLFVBQUEsR0FBYSxNQUFNLENBQUMsUUFBUCxHQUFrQixFQUEvQixDQUFBO0FBQUEsSUFDQSxVQUFBLEdBQWEsRUFEYixDQUFBO0FBQUEsSUFFQSxPQUFBLEdBQVUsTUFBTSxDQUFDLEtBQVAsR0FBZSxFQUZ6QixDQUFBO0FBQUEsSUFHQSxPQUFBLEdBQVUsRUFIVixDQUFBO0FBQUEsSUFLQSxNQUFBLEdBQVMsU0FBQSxHQUFBO0FBQ1AsTUFBQSxNQUFNLENBQUMsTUFBUCxDQUFjLFFBQWQsRUFBd0I7QUFBQSxRQUFBLEVBQUEsRUFBSSxVQUFKO09BQXhCLENBQ0UsQ0FBQyxFQURILENBQ00sS0FETixFQUNhLFNBQUMsR0FBRCxHQUFBO0FBRVQsWUFBQSwwREFBQTtBQUFBLFFBQUssVUFBSixHQUFELGNBQVMsS0FBSyxXQUFBLEtBQUksVUFBQSxJQUFHLFdBQUEsS0FBSSxXQUFBLElBQXpCLENBQUE7QUFDQTthQUFBLFVBQUE7eUJBQUE7QUFDRSxVQUFBLEdBQUEsR0FBTSxFQUFBLEdBQUUsQ0FBQSxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsQ0FBQSxDQUFGLEdBQWdCLEtBQWhCLEdBQW9CLEdBQTFCLENBQUE7QUFBQSxVQUNBLEdBQUEsR0FBTSxFQUFBLEdBQUUsR0FBRixHQUFPLEtBQVAsR0FBVyxHQURqQixDQUFBOztZQUVBLFVBQVcsQ0FBQSxHQUFBLElBQVEsVUFBVSxDQUFDO1dBRjlCO0FBQUEsd0JBR0EsVUFBVyxDQUFBLFVBQVcsQ0FBQSxHQUFBLENBQVgsQ0FBWCxHQUE4QixNQUFBLENBQU87QUFBQSxZQUFDLEtBQUEsR0FBRDtBQUFBLFlBQUssS0FBQSxHQUFMO0FBQUEsWUFBUyxLQUFBLEdBQVQ7QUFBQSxZQUFhLElBQUEsRUFBYjtBQUFBLFlBQWdCLEtBQUEsR0FBaEI7QUFBQSxZQUFvQixLQUFBLEdBQXBCO0FBQUEsWUFBd0IsS0FBQSxHQUF4QjtXQUFQLEVBSDlCLENBREY7QUFBQTt3QkFIUztNQUFBLENBRGIsQ0FBQSxDQUFBO2FBVUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxRQUFkLEVBQXdCO0FBQUEsUUFBQSxLQUFBLEVBQU8sVUFBUDtPQUF4QixDQUNFLENBQUMsRUFESCxDQUNNLEtBRE4sRUFDYSxTQUFDLEdBQUQsR0FBQTtBQUVULFlBQUEsdUNBQUE7QUFBQSxRQUFLLFVBQUosR0FBRCxFQUFhLFdBQUosR0FBVCxDQUFBO0FBQUEsUUFDQSxHQUFBLEdBQU0sRUFBQSxHQUFFLENBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxDQUFWLENBQUEsQ0FBRixHQUFnQixLQUFoQixHQUFvQixHQUQxQixDQUFBOztVQUVBLE9BQVEsQ0FBQSxHQUFBLElBQVEsT0FBTyxDQUFDO1NBRnhCO0FBQUEsUUFHQSxPQUFRLENBQUEsT0FBUSxDQUFBLEdBQUEsQ0FBUixDQUFSLEdBQXdCLElBSHhCLENBQUE7QUFLQTthQUFBLGlEQUFBOytCQUFBO0FBQUEsd0JBQUEsTUFBQSxDQUFPLEdBQVAsRUFBQSxDQUFBO0FBQUE7d0JBUFM7TUFBQSxDQURiLEVBWE87SUFBQSxDQUxULENBQUE7QUFBQSxJQTBCQSxNQUFBLEdBQVMsU0FBQyxHQUFELEdBQUE7QUFDUCxVQUFBLElBQUE7QUFBQSxNQUFBLElBQUEsR0FBTyxPQUFRLENBQUEsT0FBUSxDQUFBLEdBQUcsQ0FBQyxHQUFKLENBQVIsQ0FBZixDQUFBO0FBQ0EsTUFBQSxJQUFHLFlBQUg7QUFDRSxRQUFBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsSUFBSSxDQUFDLElBQWhCLENBQUE7QUFBQSxRQUNBLEdBQUcsQ0FBQyxJQUFKLEdBQVcsSUFBSSxDQUFDLElBRGhCLENBREY7T0FEQTtBQUFBLE1BSUEsR0FBRyxDQUFDLEtBQUosR0FBWSxHQUFHLENBQUMsR0FKaEIsQ0FBQTthQUtBLElBTk87SUFBQSxDQTFCVCxDQUFBO0FBa0NBLElBQUEsSUFBYSxNQUFNLENBQUMsWUFBUCxLQUF1QixXQUFwQztBQUFBLE1BQUEsTUFBQSxDQUFBLENBQUEsQ0FBQTtLQWxDQTtXQW1DQSxNQUFNLENBQUMsR0FBUCxDQUFXLFNBQVgsRUFBc0IsU0FBQSxHQUFBO2FBQUcsTUFBQSxDQUFBLEVBQUg7SUFBQSxDQUF0QixFQXBDMEI7RUFBQSxDQUE1QixDQVRBLENBQUE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIm5nID0gYW5ndWxhci5tb2R1bGUgJ215QXBwJ1xuXG5uZy5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCBuYXZiYXJQcm92aWRlcikgLT5cbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUgJ3N0YXR1cycsXG4gICAgdXJsOiAnL3N0YXR1cydcbiAgICB0ZW1wbGF0ZVVybDogJ3N0YXR1cy9zdGF0dXMuaHRtbCdcbiAgICBjb250cm9sbGVyOiAnU3RhdHVzQ3RybCdcbiAgbmF2YmFyUHJvdmlkZXIuYWRkICcvc3RhdHVzJywgJ1N0YXR1cycsIDMwXG5cbm5nLmNvbnRyb2xsZXIgJ1N0YXR1c0N0cmwnLCAoJHNjb3BlLCBqZWVidXMpIC0+XG4gIHJlYWRpbmdWZWMgPSAkc2NvcGUucmVhZGluZ3MgPSBbXVxuICByZWFkaW5nTWFwID0ge31cbiAgdW5pdFZlYyA9ICRzY29wZS51bml0cyA9IFtdXG4gIHVuaXRNYXAgPSB7fVxuXG4gIGF0dGFjaCA9IC0+XG4gICAgamVlYnVzLmdhZGdldCAnQXR0YWNoJywgSW46ICcvc2Vuc29yLydcbiAgICAgIC5vbiAnT3V0JywgKG1zZykgLT5cbiAgICAgICAgIyBsb2M6IC4uLiB2YWw6IFtjMToxMixjMjozNCwuLi5dXG4gICAgICAgIHtUYWc6ZGV2LE1zZzp7bG9jLG1zLHZhbCx0eXB9fSA9IG1zZ1xuICAgICAgICBmb3Iga2V5LCByYXcgb2YgdmFsXG4gICAgICAgICAgZGlkID0gXCIje2Rldi5zbGljZSg4KX0gLSAje2tleX1cIiAjIGRldmljZSBpZFxuICAgICAgICAgIHRpZCA9IFwiI3t0eXB9IC0gI3trZXl9XCIgICAgICAgICAgIyB0eXBlIGlkXG4gICAgICAgICAgcmVhZGluZ01hcFtkaWRdID89IHJlYWRpbmdWZWMubGVuZ3RoXG4gICAgICAgICAgcmVhZGluZ1ZlY1tyZWFkaW5nTWFwW2RpZF1dID0gdXBkYXRlIHtsb2Msa2V5LHJhdyxtcyx0eXAsZGlkLHRpZH1cbiAgICAgICAgICBcbiAgICBqZWVidXMuZ2FkZ2V0ICdBdHRhY2gnLCBUb3BpYzogJy9kcml2ZXIvJ1xuICAgICAgLm9uICdPdXQnLCAobXNnKSAtPlxuICAgICAgICAjIG5hbWU6IHVuaXQ6IHNjYWxlOiAuLi5cbiAgICAgICAge1RhZzp0YWcsTXNnOmluZm99ID0gbXNnXG4gICAgICAgIHRpZCA9IFwiI3tUYWcuc2xpY2UoOCl9IC0gI3trZXl9XCJcbiAgICAgICAgdW5pdE1hcFt0aWRdID89IHVuaXRWZWMubGVuZ3RoXG4gICAgICAgIHVuaXRWZWNbdW5pdE1hcFt0aWRdXSA9IGluZm9cbiAgICAgICAgIyB1cGRhdGUgZXhpc3RpbmcgcmVhZGluZ3NcbiAgICAgICAgdXBkYXRlIHJvdyAgZm9yIHJvdyBpbiByZWFkaW5nVmVjXG5cbiAgdXBkYXRlID0gKHJvdykgLT5cbiAgICBpbmZvID0gdW5pdFZlY1t1bml0TWFwW3Jvdy50aWRdXVxuICAgIGlmIGluZm8/XG4gICAgICByb3cubmFtZSA9IGluZm8ubmFtZVxuICAgICAgcm93LnVuaXQgPSBpbmZvLnVuaXRcbiAgICByb3cudmFsdWUgPSByb3cucmF3XG4gICAgcm93XG5cbiAgYXR0YWNoKCkgIGlmICRzY29wZS5zZXJ2ZXJTdGF0dXMgaXMgJ2Nvbm5lY3RlZCdcbiAgJHNjb3BlLiRvbiAnd3Mtb3BlbicsIC0+IGF0dGFjaCgpXG4iXX0=
